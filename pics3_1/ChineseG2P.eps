%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 717.000000 207.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 717 207
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 717 207
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /h put
dup 35 /i put
dup 36 /n put
dup 37 /e put
dup 38 /s put
dup 39 /space put
dup 40 /a put
dup 41 /r put
dup 42 /c put
dup 43 /t put
dup 44 /P put
dup 45 /o put
dup 46 /l put
dup 47 /y put
dup 48 /p put
dup 49 /question put
dup 50 /u put
dup 51 /D put
dup 52 /m put
dup 53 /b put
dup 54 /g put
dup 55 /M put
dup 56 /d put
dup 57 /x put
dup 58 /I put
dup 59 /f put
dup 60 /N put
dup 61 /Y put
dup 62 /q put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/question 2 def
/C 3 def
/D 4 def
/I 5 def
/M 6 def
/N 7 def
/P 8 def
/Y 9 def
/a 10 def
/b 11 def
/c 12 def
/d 13 def
/e 14 def
/f 15 def
/g 16 def
/h 17 def
/i 18 def
/l 19 def
/m 20 def
/n 21 def
/o 22 def
/p 23 def
/q 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
/x 29 def
/y 30 def
/uni2B91 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C1729802DA479E44F824526137EEB725F9A8277E11FB440D7432A2FB2F8DA2BCCD532B90735191BAC4AF35F550E035C4C8C1BAC2797ED4C005EE32CFA64F85F936DA558E85ADDE29C5BBD37B21FA3E42D654555F85605CB9ECAB97B70F446E2730C76DDCDBDDCF5C6E2CA5FE3C79473D5844B8048DC6EE0A580102672FB3CCED75D01D9E537C4C8AD1934E342137862A5E1A1E46F9FCE6D853C20D141299E4BDE39514D6697185987324BFBA2536C7325AEF8F7365F4DE8C346781CDD9676DBE0BC8A72D713FBF329E30F128C75F81E96B64EDBEF3965E53EFFF3D6A387E18C1820800414C4D897011582D10AC4BA931B66FADE77BAA7754278F686EEFF48F69A8480ACD3BF7EE5E434A91ADB8D0C47AF89CD37A2B8401657E25946685FF5C9D05D6AF70FEA0CC7533E65D578AC049FCA0813F3DC34F15C5D96FE7137B732BBA753EFA29ED331A85B1AA72F20ACC175777A6AF4C48E217E6EE29EAD2E2F24D658E0A7D0DE9ABF8A3495423CF895774CA8C5D2ED89DC52630099ECA51D802EDB65C7FD65A32575D315C91352A9069C10476F390E3D5DD62D3A9C750A7AC4B5A328FF450291662EF461BCBC8E8EC3B3954AB451E7ACE054853CE3EEEDB068B9C273C48F0F42BC9049075E167083C4B30CC251C40EE3F2AAB981743252081CCAEC083A14230288048E7BE760065E9A2D86869F5E1D3FABA179034319D73072C8906E33B0C15B9AFB
03D7F2F9123CEC857842E12DDED4F9596BDBEA8430AC62CFC9F284177F42F668C1B16166D828C36AD53F20A2C79066BC69C6BA6C9A2F2E0D21C61B8907DBF3EB73D3DEC8E02329D6CC1BC14E4847CFCD144DB2AF4315C5C37C8EDB2D8BC77961002DEBF1872112880069C7BDC5FDD230F751C53F300472D598F634F3674FF610F2C8D200C4AEF658BB32D3678E6BACBD00FB10A3BB924AF1F8589FE4D8D34D6D7B209E28F0AD5A38BD2FE40D6EAAE306A17F54ECE851F2394A8379D2FF184905E956A09BB1AFC28057001631F8605CCD4C4FB81B5D0CC030DCE5C8D6EA3B343D86F6B7F920FD215B8B0EBC3A11C81397668B871F0D37641031821FA41BB5DBC2F245018515246DA87D30E04615140F6016F9D980BE3516DA68A44F7D283E0732B6BA428DDCD08D84BAF881118AEC910EC12CABED4C575C793353E27D43A16786F64CC8C014C4F022E9D1F1799B9BEF4E01653CB440AF647253B512616B2686192B2E6D70DD498EF6F84530F1D219D3823DC18C7D1C56596FD16A768188361392FB22B2461AC87CB48D2C011D6BC54A8C9474F232E6ACE17D93AEC4D3A9445842E5C33C39CAE7236DAFCB9E55A0823D51030CB30064D2B8B4B0C0C210E4DD4B67FABCC92D155A51DDD206E8781261E7C979EF94BA6237BC6870DBC84DEF6B9FB423CEF30534607DB32A686A453FDA6318D50682FF75B4ED93220A18585BC337472F20CF988C176D6C87B66E347BDFFA3C9069B0DB322C2CDCEA02BB2B63DA83FC2E3B5CDFF87AE86B15FD4C8037DCCEEA5FA204BCC9E2827A8ACC7DD8F0534AB75635DCCBD704EF39E4BA521C02EC74BC920A4987FD744299E1140FCC5FE4C9B1E6297932B591AE60A480A1DF57C76158DA35F012DAE11D346C663606D44FEF577BFE0D18E21593687E53F5AD0514BB68D0800E68D54CE355A0EB12AD27CEDF0366467C2F4261DF39778700851B4C36087404420886DC1365B5B2B64E87FD2291D9DE70F5F90708B2132CB2DE3CA0E9597983BAEB4023ECAEE7434519141A8C4B1DE649228FEF5AD598AADDC6FEC39E2A03F3FBE84C1A41FABB35705FEC6B2193C262B578F504BAFB7E57D9BA1C3B9870C3BEF04419CB365EA4C411E01DCF55662CF3F3A8B04982D7F185BF3AECD8765A8D0E161D4A1AB7951C3AF34E980B0679BFCAAC6BD54DCDB69D6593F7C1D0523D8A2008D31E5CDF853FF47ABBD88DD7A7390C538F6C50BDC2A9F8678DB481AF8BE5E1EB00BFB0B00A85DF713B051D30D8B8588916693160DA97BCE20C1DF5379EADEC7A25EBC0D0F2F7CFEB081F4A1F043365322C4E37709A90EDBABDA0C1AA01BEEA58530CD33288C44FA2742A66B7397DC142AAC4EC1CC37C485ABCFAD65C91D522920808BEAD633A5DCA50D613B3EC3C12C9B0B3142DBF21FBE2CBC03F1A4697787D8539FAF6A36ABB9D201DD50DC8


A34C3DA6ECA0E76090621A6D49274204DA1896E403232BF26903AF444E9AEE867D8E3CBEEF561886E9A893EC1877B2C036D0CA5FAB46C6DF4F98D2CF90FF95F666E06A2BF6A2498A8F7A5A7256C5C811C5352B768898236B2D387D9EC4B70DE3F87D3CFA650074B70D8A613F56B93DC9582F2FF47A21E01DA3427A3820E5542D5C8237D76ECE0D4BBD525878A624C32F30991E3C959CB874C8BFCF5E5DDF5D08AA5B1DC4CD3A59A0D20C0AB9CD10C587AFD5126966E66E1BD50D7D742C1FA6F9A9326F2FB93B961F81D76297A1A6EB267457C5DF6998B492EF4EC2A554B22B88384497DA915B49C1C3D1EF1212E9BB6B53BA1A15EAE20DF9D70AEA738891C5D64A32362064A55A838E8A8748618DE6D8DCE6E7344A6A4FD4D76D6EBCB299F9259EB7A2B6C79EB5531FB50FD8D0CCE4327B1B8F74F7EF8F08E21E0774C5C5EF87FE8ED4959808E11E4D79ACD224D44C703A68F9BA306D03692CCF608F92CF0D52CA42B13B195AE3108973060907B206970D33D32FE0B098091A7803F199E4271DDECF17F3EA10AF0A7A495E536FF9BE9C444A8675351915CF553D39BBBBEF10D32C85AB7CF397E579487B9AEEF2C05324B24990DDCE7C6D75E8C5AC59368E329A41F8A732EA88D2A7E389699FD5CD93EE34868BBBF173CF7ECEC70356F58781B8BED9726F66D8BFC08A241B7D69E87CF2C2E7A0F6354D4BE24BA979AD361B03DE95490E4494224981968572CE86578323839D23C05246C2EE4F8D453AA97DE114BF415CF464EA644C477970523BA143B48E09E08D7C1ABE3BDE996D297EADEC11E6A8A692DA4D817F05E059C7B233D0B25E6F554843AFE9E38C694D4CA52DDDA250742160DCF2A75CF04F1F1415391D5EABAA7A24AA161837F740BA6BC15DAE0210003C57A498C6E2D83BEE0DC827739C3FEB1C5338DE5BB1D50FF80E6AFC45B0094CD9B166FF117DC4338873827BC703BFB851913D1BEFCF460C627F289B76F5A873CA60E7B372474907B2D090C7F0E708F8DD1F6F5CBE82A1FA306CA38F28376ADE429EE9148C60B0DE5645BE2195FC90BAC6A21079A2CB1B536059CFF232CAD5969412410239FD221AB12F2537BA84F0373158A64DAE6A7680D610E613A1E94E9CCEAF4B329269B824EFA010486FDBF3D9C4E33A55FCBA4A3419A57D73BED65234AB18FCFA4266FBBB9A89A6EFF8A172286388EC8C61D67EAD923CE8F6C9BA125BDDFBB1B801FB2AA9A089E157ED22CEF92B739466AB5036235F851E7198FDE3DDEFAE11C44BDA1483C2BF3388A2FE9BCA130AF667C0D288BF574B20BA629458504B38EF1EBE8E2CF79CE576FA2BA6FB83F1F585CE82B58F8B341CE5EFD162D9643BDB3B6D9369380980F255A622D83E8D1A1DB12E4C9D4DC7BFCDC1FF389103E092556C32567707248DBDCBE6D7DCF060BF023D1B78C27511644599836D09

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 717 207 rc
0 207 m
717 207 l
717 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-948.31464 1027.2247 m
1878.6517 1027.2247 l
1878.6517 -1377.2697 l
-948.31464 -1377.2697 l
h
-948.31464 1027.2247 m
f
3 143 m
118.5 143 l
119.60457 143 120.5 142.10457 120.5 141 c
120.5 97 l
120.5 95.895432 119.60457 95 118.5 95 c
3 95 l
1.8954304 95 1 95.895432 1 97 c
1 141 l
1 142.10457 1.8954304 143 3 143 c
h
3 143 m
f
2 w
1 J
1 j
[
16
10
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -153 311 cm
156 168 m
271.5 168 l
272.60458 168 273.5 168.89543 273.5 170 c
273.5 214 l
273.5 215.10457 272.60458 216 271.5 216 c
156 216 l
154.89543 216 154 215.10457 154 214 c
154 170 l
154 168.89543 154.89543 168 156 168 c
h
156 168 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
184.71001 188.552 m
(!"#$%&%')[ 11.552000 8.896000 3.552000 8.896000 8.592000 8.000000 8.592000 0.000000 ] xS
178.494 207 m
(!"\(\)\(*+%\))[ 11.552000 8.896000 8.592000 5.328000 8.592000 8.592000 5.040000 8.592000 0.000000 ] xS
/Cs2 SC
0.75 1 1 sc
CM
215 159.875 m
281 119 l
215 78.125 l
149 119 l
h
215 159.875 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -153 311 cm
368 151.125 m
434 192 l
368 232.875 l
302 192 l
h
368 151.125 m
S
/Cs1 SC
0 sc
0 i
329.46399 187.7345 m
(,-./0"-$#*)[ 10.368000 9.184000 3.552000 8.000000 9.488000 8.896000 9.184000 8.896000 3.552000 0.000000 ] xS
329.616 206.1825 m
(!"\(\)\(*+%\)1)[ 11.552000 8.896000 8.592000 5.328000 8.592000 8.592000 5.040000 8.592000 5.328000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
274.5 192 m
287.20074 192 l
S
0 i
CM
143.80074 119 m
134.20074 122.6 l
134.20074 115.4 l
h
143.80074 119 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
296.80075 192 m
287.20074 188.39999 l
287.20074 195.60001 l
h
296.80075 192 m
S
0.75 1 1 sc
CM
304.39999 205.5 m
399.60001 205.5 l
410.86081 205.5 420 192.508 420 176.5 c
420 160.492 410.86081 147.5 399.60001 147.5 c
304.39999 147.5 l
293.13919 147.5 284 160.492 284 176.5 c
284 192.508 293.13919 205.5 304.39999 205.5 c
h
304.39999 205.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -153 311 cm
457.39999 105.5 m
552.59998 105.5 l
563.86078 105.5 573 118.492 573 134.5 c
573 150.508 563.86078 163.5 552.59998 163.5 c
457.39999 163.5 l
446.13919 163.5 437 150.508 437 134.5 c
437 118.492 446.13919 105.5 457.39999 105.5 c
h
457.39999 105.5 m
S
/Cs1 SC
0 sc
0 i
455.65601 131.052 m
(,\)-$2$*#\(+#-$)[ 10.368000 5.040000 9.184000 8.896000 8.896000 8.896000 8.592000 3.552000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
469 149.5 m
(3#*+#-$\(\)/)[ 11.264000 3.552000 8.592000 5.040000 3.552000 9.184000 8.896000 8.592000 5.328000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
368 149.94876 m
368 140.125 l
368.00177 137.82637 l
368.00177 134.5 l
423.10001 134.5 l
S
0 i
CM
279.70001 176.5 m
270.10001 180.10001 l
270.10001 172.89999 l
h
279.70001 176.5 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
432.70001 134.5 m
423.10001 130.89999 l
423.10001 138.10001 l
h
432.70001 134.5 m
S
0.75 1 1 sc
CM
299 88 m
415 88 l
417.76141 88 420 85.761421 420 83 c
420 35 l
420 32.238575 417.76141 30 415 30 c
299 30 l
296.23859 30 294 32.238575 294 35 c
294 83 l
294 85.761421 296.23859 88 299 88 c
h
299 88 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -153 311 cm
452 223 m
568 223 l
570.76141 223 573 225.23857 573 228 c
573 276 l
573 278.76141 570.76141 281 568 281 c
452 281 l
449.23859 281 447 278.76141 447 276 c
447 228 l
447 225.23857 449.23859 223 452 223 c
h
452 223 m
S
/Cs1 SC
0 sc
0 i
471.92001 239.328 m
(,-./0"-$%')[ 10.368000 9.184000 3.552000 8.000000 9.488000 8.896000 9.184000 8.896000 8.592000 0.000000 ] xS
458.57599 257.776 m
(3#&\(45#62+#-$')[ 11.264000 3.552000 8.000000 8.592000 13.648000 9.488000 3.552000 9.184000 8.896000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
487.62399 276.224 m
(7-8%.)[ 13.936000 9.184000 9.488000 8.592000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
368 234.05124 m
368 252.69922 l
395.78125 252.69922 l
395.78125 252 l
433.10001 252 l
S
0 i
CM
289.70001 59 m
280.10001 62.599998 l
280.10001 55.400002 l
h
289.70001 59 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
442.70001 252 m
433.10001 248.39999 l
433.10001 255.60001 l
h
442.70001 252 m
S
1 1 1 sc
CM
3 49 m
118.5 49 l
119.60457 49 120.5 48.104568 120.5 47 c
120.5 3 l
120.5 1.8954304 119.60457 1 118.5 1 c
3 1 l
1.8954304 1 1 1.8954304 1 3 c
1 47 l
1 48.104568 1.8954304 49 3 49 c
h
3 49 m
f
1 J
1 j
[
16
10
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -153 311 cm
156 262 m
271.5 262 l
272.60458 262 273.5 262.89542 273.5 264 c
273.5 308 l
273.5 309.10458 272.60458 310 271.5 310 c
156 310 l
154.89543 310 154 309.10458 154 308 c
154 264 l
154 262.89542 154.89543 262 156 262 c
h
156 262 m
S
/Cs1 SC
0 sc
0 i
185.45399 282.552 m
(!-$+%9+')[ 11.552000 9.184000 8.896000 5.040000 8.592000 8.288000 5.040000 0.000000 ] xS
173.14999 301 m
(:$;-\)4\(+#-$)[ 4.144000 8.896000 4.736000 9.184000 5.328000 13.648000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
274.5 286 m
368.05859 286 l
368.05859 252 l
433.10001 252 l
S
0 i
CM
289.70001 59 m
280.10001 62.599998 l
280.10001 55.400002 l
h
289.70001 59 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
442.70001 252 m
433.10001 248.39999 l
433.10001 255.60001 l
h
442.70001 252 m
S
1 1 1 sc
CM
435.5 143 m
551 143 l
552.10455 143 553 142.10457 553 141 c
553 97 l
553 95.895432 552.10455 95 551 95 c
435.5 95 l
434.39542 95 433.5 95.895432 433.5 97 c
433.5 141 l
433.5 142.10457 434.39542 143 435.5 143 c
h
435.5 143 m
f
1 J
1 j
[
16
10
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -153 311 cm
588.5 168 m
704 168 l
705.10455 168 706 168.89543 706 170 c
706 214 l
706 215.10457 705.10455 216 704 216 c
588.5 216 l
587.39545 216 586.5 215.10457 586.5 214 c
586.5 170 l
586.5 168.89543 587.39545 168 588.5 168 c
h
588.5 168 m
S
/Cs1 SC
0 sc
0 i
592.90601 197 m
(,\)-$2$*#\(+#-$&)[ 10.368000 5.040000 9.184000 8.896000 8.896000 8.896000 8.592000 3.552000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
574 134.5 m
646.16949 134.5 l
646.16949 150.01518 l
646.25 150.01518 l
646.25 154.10001 l
S
0 i
CM
493.25 147.3 m
496.85001 156.89999 l
489.64999 156.89999 l
h
493.25 147.3 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
646.25 163.7 m
649.84998 154.10001 l
642.65002 154.10001 l
h
646.25 163.7 m
S
1 J
1 j
0.60000002 i
574 252 m
646.18262 252 l
646.18262 237.99965 l
646.25 234.89999 l
646.25 229.89999 l
S
0 i
CM
493.25 90.699997 m
489.64999 81.099998 l
496.85001 81.099998 l
h
493.25 90.699997 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
646.25 220.3 m
642.65002 229.89999 l
649.84998 229.89999 l
h
646.25 220.3 m
S
/Cs1 SC
0 sc
376.90799 154.5 m
(<)s
381.90799 241 m
(=)s
/Cs2 SC
1 1 1 sc
CM
597.75281 143 m
713.25281 143 l
714.35736 143 715.25281 142.10457 715.25281 141 c
715.25281 97 l
715.25281 95.895432 714.35736 95 713.25281 95 c
597.75281 95 l
596.64825 95 595.75281 95.895432 595.75281 97 c
595.75281 141 l
595.75281 142.10457 596.64825 143 597.75281 143 c
h
597.75281 143 m
f
1 J
1 j
[
16
10
] 0 d
0.60000002 i
0.64705884 0.64705884 0.64705884 sc
1 0 0 -1 -153 311 cm
750.75281 168 m
866.25281 168 l
867.35736 168 868.25281 168.89543 868.25281 170 c
868.25281 214 l
868.25281 215.10457 867.35736 216 866.25281 216 c
750.75281 216 l
749.64825 216 748.75281 215.10457 748.75281 214 c
748.75281 170 l
748.75281 168.89543 749.64825 168 750.75281 168 c
h
750.75281 168 m
S
/Cs1 SC
0 sc
0 i
774.41479 188.552 m
(,"-$%4%')[ 10.368000 8.896000 9.184000 8.896000 8.592000 13.648000 8.592000 0.000000 ] xS
773.67883 207 m
(&%>2%$*%)[ 8.000000 8.592000 9.488000 8.896000 8.592000 8.896000 8.592000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
707 192 m
734.85278 192 l
S
0 i
CM
591.45282 119 m
581.85278 122.6 l
581.85278 115.4 l
h
591.45282 119 m
f
0 J
0 j
1 0 0 -1 -153 311 cm
744.45282 192 m
734.85278 188.39999 l
734.85278 195.60001 l
h
744.45282 192 m
S
ep
end
%%Trailer
%%EOF
