%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 245.000000 308.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 245 308
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 245 308
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /ellipsis put
dup 34 /P put
dup 35 /r put
dup 36 /o put
dup 37 /n put
dup 38 /u put
dup 39 /c put
dup 40 /i put
dup 41 /a put
dup 42 /t put
dup 43 /s put
dup 44 /B put
dup 45 /L put
dup 46 /S put
dup 47 /T put
dup 48 /M put
dup 49 /space put
dup 50 /O put
dup 51 /p put
dup 52 /E put
dup 53 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






0844089408EC09220001000000170096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/E 3 def
/L 4 def
/M 5 def
/O 6 def
/P 7 def
/R 8 def
/S 9 def
/T 10 def
/a 11 def
/c 12 def
/i 13 def
/n 14 def
/o 15 def
/p 16 def
/r 17 def
/s 18 def
/t 19 def
/u 20 def
/ellipsis 21 def
/uni2B91 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec

6CDB37738BA9C96D110A6390EC06E626CCAEAC83D16D3A6351EE46F06DC87114F03048F72BFE58E7D2A8D8D0032D05FF024B0616775F4AF62B332D79D669DCD70D2324F17A15E491C4DAD9BB69293B1FBD5A21B36D65D7E7762DBB0836F66525D13BB528CA30A7B84B70FBD6B1E0239A87EF9B834DB85F7A7D7B80BB9AE4C58FFE5A5F68587AF946A93696DA4A53D8174ED06FADF929A2C4692F1A83839735A1B0186CF79032467172553487F7E1634599DF9BB591ADA8C4B1E5B040F1A979964532BAAC2B08B29BEF35C1FB0F289AC3D97EB2EAFF0FB679825EB978AEE8075E79E27232B62A01071EEAFC6342DAC797B68FE2C13A6F861A63B9AF604E59F98213F168E08C32FF2A76A1E5A0956F23BE8099D8692B760AC6B7AA31EA58BA155371F9067B4DAECBCD00D57D46997E251C1F57A07B6EB1AC8AA16CCF5A879ACA730A09F1E81F3B2C5D2C819945F399EBD4D9D47747EEB03D804127B278921083479700A62792EAD2ED1541F96B21804F8AADAC2FFE0E6310025221CB226561F202334C2824FA05710610C8BE56D5B8243530808C8A977D33DD84802F2D39E4FDD57ED987BFD46350E4086B873F48451C0EE7F1532F73D5BBA0AC5B39403A17A4EBC0E738F92FD867EACDDB8E1DB582962BB58C7A6FDB6137579B517922C79ABE4A707B4C40AFF144C676A60AF991F6DAE089725BBA76591AA04427145BFC4EBEED6C3427591221970CC4ADA5ABF7656ABE3701D3EC30760FDB0BCFE2FAD26F96CF5C7AD76F8DD9474E27186471C7AA06527D33CA3BDF67CFA17B4E0DF2E4742C678557025F856F60015FCD4F6DD2F4D86D922B649E663A78DA7E7DF477D545B20789F0489C7F53E46BDC8593F85FED7FC29D5420E38826E4F8E1EBE576DD225DFE410F3CB2DAD8B667498C28B6E2534FC322D4FB2D675A4BDE117C5D7E0954B02AC0B0BB0EC633838AF3E2F49048AC0D9A7C091E1E7961A96C45AA1BF61E53153EBF45766F028FFCCA2A8799978647CBC9235D7D7C3F0DF010A7EC0B1F098387893F6F6CFBDB7301D911D2D8DC572F89DE0A250D437942EC0D30AF2634F7707D42391FF03FC5B317F21640C67D3EC8B80F1E6A25145F1911CD72A7E4692957C8CCB6D9E5E2A1FD46A8358C7E954064ADAED856EB92B50EBDBE3D26153AD80B0075E19BAC12CDC7FC87F98FDB43EF585B21D0577844F459C133622FA3C8D92071E3D390A76562CA90DD20A7465618828DF9CB10844BA952A0A5B4F0C60ABBCBE8CAA88F4099C2690089EB8FF77463540DBE596A74DEBD00CF641AE53B81C22E0BE194541016922A55388F06ACC80A9ED12292F3C7F57167EF3E9428D09B259551C46C23EFEC7B04DCCAE86B825AF2FEB64C10E35FD53F2DB22CDC5171905C9E33D4EE3B0CD8E55B5B18FB901EC5B854AFD479BF1F38A4CED4EA01414F39FD67608E

AE7B6C064BFE30C1AC223C13620881013199A9ADDE583C0ECB87F75333AD4CE00ED6EE5536A31821478C211CA8A874087018C01F4B46A3F588F54E6025FC836E49F29374CB1E1F9C4A3D2C6FDD9175B93844D0919380AE5F4CE4013A09D74A437CD635BFE435F4EC1D5F3EB03EC6BD6CE2FA09A78E3138366CDE7651ED81069310373299C4E4C047A44D4DC12DCE372B0ADA1F1E5BB7AE3161965EBA1B3314F80E04C63254FC5B2C138B303B454FA78B8430D174A1BEC744FCDF9A48D86D68580B780F3D14630601325B4B483EC36A21FC5EEEEB0C5A7C5BBEA01424470F1E104ED65BB539A22503DE111079E3EB25BC7C24393B2F2ED4C232F75A606A075607C8843F303CEEFA25CCD992AFAC5A9D7F283928F7ECCEEEA509AE04FB30A9CC1F5C78B024F2BD8DEF298DBA04DC80AD9C6D68BBC19D083B7EBE0B6A89A07AC44B97994B9F4B19D1126225E3AA4882683EEF364E48CF1D240716DAEE10036C87B1E8871083C8B4E1B5601F50F9233883F2EE1CCCAB3F32DE56692A2221E8DB97187E265390B3FBAC3002583B810276630F873728F1A8EA47C62FEBAF7EDB2D4AB2584508D80CA768B3A4858B81DF728C458E6324084B59AF59DCF8F9A9D71BCB313DEF719DF88E26A33F3A275552B65AD43E5E8300BE9E3752DE533697A1D7405CB57CCBC5ED92E1A3FCF48BF2FA3574BDA713C285A214228D757160D8B564EBD54AE063AEFCFB9AF90BBEB1E3AA6A4D70CDEDB2A213D9E1823BC8A89A606AD36013CAD4EE2AD80506F00783CE583386BC8110754183CB2CF0519E2DC57D84E55A1D836362F6FA131B5788656A8A6B0CE14ECA6E5EA13E68A6151701C6A5413C8F7FC4DD744FEBDDE80EF69FBBA4E7BB517B2EA6402A2DC6F46AEFC6D4F861D909804B12768A35B865A7FFE1406744DB578C620CDF260CC4C356A5D76A287FF042BA3E2CF49CC30652CD370EFFBF111FA6498590EAB901B3AA220AA0D670AB95A867D302A266F501C680625A1346210FC35B4DAEC757B72BC8846476F80BAD0DFB7D07C5A98058B052B6BD92D861A8518DBD7E67EE26AFB5C7E452FD4346EEA7E4F8CDF03F3163D4E7429A82CA603EB20CC0F1FC6F02559ACFA565BF059639DEE49576395CAB61D659CA55F42EBC49EC14E6587C2B6A3263BD4EF5170D2CF38F666838836FC07F7DFAB0D0A71AE719968550101BEE5B962D8C7F9A2C01891863F48DB3494E26FB6CF40982C7B716A0A2232EB2AF6CE82F45A46920DC11E758374A7A879C54EB0949104C871576A7AB953437EE3A1F2E7DF9C610CA449131B13DF92984C20E89C821535CF23C709FB0FD1BAB1B104A70C89D2FE93DBC28459D0EABB2DC462160B3C02B77E1997CB733A134FED350317F323C8CA92977E5ED4376C29CE5DECAC05FBDE42B8DC10C160C34CA70CCA8F5BBA9C6197CD0AAB7E3E01C64
664395951A32ACD077142D3364D025EA8061F52D1CA80B6EA0A2F1BEED19E952A2C9F1AA9B434737244447063731FA935E487DE785E43BD3B0DE1789E102B057121A2A463CEB9667DE89B9A2C363CB196826EACF0D3DD9215F1611C67889566654AEC36B85F042785523803438650063D896BD580E198F7AFF50D66836C8FC4E1F68218280FEA2458FA1D30EC98EAECFB14E4505
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 245 308 rc
0 308 m
245 308 l
245 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-548.05194 782.026 m
1085.7142 782.026 l
1085.7142 -607.58441 l
-548.05194 -607.58441 l
h
-548.05194 782.026 m
f
20.990841 211.65018 m
165.49084 211.65018 l
166.04312 211.65018 166.49084 211.20245 166.49084 210.65018 c
166.49084 188.19557 l
166.49084 187.6433 166.04312 187.19557 165.49084 187.19557 c
20.990841 187.19557 l
20.438555 187.19557 19.990841 187.6433 19.990841 188.19557 c
19.990841 210.65018 l
19.990841 211.20245 20.438555 211.65018 20.990841 211.65018 c
h
20.990841 211.65018 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1393.9908 717.34985 m
1538.4908 717.34985 l
1539.0431 717.34985 1539.4908 717.79755 1539.4908 718.34985 c
1539.4908 740.80444 l
1539.4908 741.35669 1539.0431 741.80444 1538.4908 741.80444 c
1393.9908 741.80444 l
1393.4386 741.80444 1392.9908 741.35669 1392.9908 740.80444 c
1392.9908 718.34985 l
1392.9908 717.79755 1393.4386 717.34985 1393.9908 717.34985 c
h
1393.9908 717.34985 m
S
0 i
0.75 1 1 sc
CM
3 262.45459 m
70.467178 262.45459 l
71.571747 262.45459 72.467178 261.55917 72.467178 260.45459 c
72.467178 240 l
72.467178 238.89543 71.571747 238 70.467178 238 c
3 238 l
1.8954304 238 1 238.89543 1 240 c
1 260.45459 l
1 261.55917 1.8954304 262.45459 3 262.45459 c
h
3 262.45459 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1376 666.54541 m
1443.4672 666.54541 l
1444.5718 666.54541 1445.4672 667.44086 1445.4672 668.54541 c
1445.4672 689 l
1445.4672 690.10455 1444.5718 691 1443.4672 691 c
1376 691 l
1374.8954 691 1374 690.10455 1374 689 c
1374 668.54541 l
1374 667.44086 1374.8954 666.54541 1376 666.54541 c
h
1376 666.54541 m
S
0 i
1 1 0.75 sc
CM
21.797699 256.59125 m
25.312431 253.07654 25.312431 247.37807 21.797699 243.86334 c
18.282982 240.3486 12.584506 240.3486 9.0697899 243.86334 c
5.5550561 247.37807 5.5550561 253.07654 9.0697899 256.59125 c
12.584506 260.10599 18.282982 260.10599 21.797699 256.59125 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1394.7977 672.40875 m
1398.3124 675.92346 1398.3124 681.62195 1394.7977 685.13666 c
1391.283 688.65137 1385.5845 688.65137 1382.0698 685.13666 c
1378.5551 681.62195 1378.5551 675.92346 1382.0698 672.40875 c
1385.5845 668.89404 1391.283 668.89404 1394.7977 672.40875 c
S
0 i
1 1 0.75 sc
CM
65.342079 256.59125 m
68.856819 253.07654 68.856819 247.37807 65.342079 243.86334 c
61.827366 240.3486 56.128891 240.3486 52.614174 243.86334 c
49.099442 247.37807 49.099442 253.07654 52.614174 256.59125 c
56.128891 260.10599 61.827366 260.10599 65.342079 256.59125 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1438.342 672.40875 m
1441.8568 675.92346 1441.8568 681.62195 1438.342 685.13666 c
1434.8274 688.65137 1429.1289 688.65137 1425.6141 685.13666 c
1422.0995 681.62195 1422.0995 675.92346 1425.6141 672.40875 c
1429.1289 668.89404 1434.8274 668.89404 1438.342 672.40875 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
1403.2059 683.27271 m
(!)s
/Cs2 SC
0.75 1 1 sc
CM
119.32949 263.4462 m
186.79666 263.4462 l
187.90123 263.4462 188.79666 262.55078 188.79666 261.4462 c
188.79666 240.99161 l
188.79666 239.88704 187.90123 238.99161 186.79666 238.99161 c
119.32949 238.99161 l
118.22492 238.99161 117.32949 239.88704 117.32949 240.99161 c
117.32949 261.4462 l
117.32949 262.55078 118.22492 263.4462 119.32949 263.4462 c
h
119.32949 263.4462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1492.3295 665.55377 m
1559.7966 665.55377 l
1560.9012 665.55377 1561.7966 666.44922 1561.7966 667.55377 c
1561.7966 688.00836 l
1561.7966 689.11298 1560.9012 690.00836 1559.7966 690.00836 c
1492.3295 690.00836 l
1491.225 690.00836 1490.3295 689.11298 1490.3295 688.00836 c
1490.3295 667.55377 l
1490.3295 666.44922 1491.225 665.55377 1492.3295 665.55377 c
h
1492.3295 665.55377 m
S
0 i
1 1 0.75 sc
CM
138.12718 257.58286 m
141.64192 254.06815 141.64192 248.36967 138.12718 244.85495 c
134.61247 241.34023 128.914 241.34023 125.39928 244.85495 c
121.88454 248.36967 121.88454 254.06815 125.39928 257.58286 c
128.914 261.0976 134.61247 261.0976 138.12718 257.58286 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1511.1272 671.41711 m
1514.642 674.93182 1514.642 680.63031 1511.1272 684.14502 c
1507.6124 687.65979 1501.9139 687.65979 1498.3993 684.14502 c
1494.8845 680.63031 1494.8845 674.93182 1498.3993 671.41711 c
1501.9139 667.9024 1507.6124 667.9024 1511.1272 671.41711 c
S
0 i
1 1 0.75 sc
CM
181.67157 257.58286 m
185.18631 254.06815 185.18631 248.36967 181.67157 244.85495 c
178.15686 241.34023 172.45837 241.34023 168.94366 244.85495 c
165.42892 248.36967 165.42892 254.06815 168.94366 257.58286 c
172.45837 261.0976 178.15686 261.0976 181.67157 257.58286 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1554.6716 671.41711 m
1558.1863 674.93182 1558.1863 680.63031 1554.6716 684.14502 c
1551.1569 687.65979 1545.4584 687.65979 1541.9436 684.14502 c
1538.429 680.63031 1538.429 674.93182 1541.9436 671.41711 c
1545.4584 667.9024 1551.1569 667.9024 1554.6716 671.41711 c
S
/Cs1 SC
0 sc
0 i
1519.5354 682.28107 m
(!)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1407.4032 729.64203 m
1391.5791 687.20752 l
S
1432.7659 721.19629 m
1391.7308 687.61438 l
S
1495.5396 720.35382 m
1392.3608 688.24438 l
S
1523.2769 719.80444 m
1392.9908 688.14441 l
S
/Cs1 SC
0 sc
0 i
1458.4397 682 m
(!)s
0.60000002 i
/Cs2 SC
0 0 0 sc
1432.7659 721.19629 m
1432.1453 687.77118 l
S
1404.0271 720.58875 m
1432.1514 688.10541 l
S
1495.5396 720.35382 m
1432.1589 688.50848 l
S
1523.2769 719.80444 m
1432.1514 688.10541 l
S
1404.0221 720.57507 m
1505.1627 686.41492 l
1505.1627 687.89478 l
1505.1627 686.54895 l
S
1403.8773 720.18689 m
1548.5563 687.12775 l
S
1432.7659 721.19629 m
1505.1627 687.89478 l
S
1434.2257 720.64203 m
1548.5563 687.12775 l
S
1496.4785 730.00806 m
1505.1627 686.54895 l
S
1498.5447 719.66785 m
1548.5563 687.12775 l
S
1523.2769 719.57812 m
1505.1627 686.41492 l
S
1523.2769 719.57812 m
1549.6805 687.6424 l
S
0 i
1 1 1 sc
CM
37.475109 264.44708 m
33.625282 264.44708 l
33.625282 268.75537 l
31.700371 268.75537 l
35.550198 279.75537 l
39.400021 268.75537 l
37.475109 268.75537 l
h
37.475109 264.44708 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1410.4751 664.55292 m
1406.6252 664.55292 l
1406.6252 660.24463 l
1404.7003 660.24463 l
1408.5502 649.24463 l
1412.4 660.24463 l
1410.4751 660.24463 l
h
1410.4751 664.55292 m
S
0 i
1 1 1 sc
CM
154.98799 265.29456 m
151.13817 265.29456 l
151.13817 269.60281 l
149.21326 269.60281 l
153.06308 280.60281 l
156.9129 269.60281 l
154.98799 269.60281 l
h
154.98799 265.29456 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1527.988 663.70544 m
1524.1382 663.70544 l
1524.1382 659.39716 l
1522.2133 659.39716 l
1526.0631 648.39716 l
1529.9128 659.39716 l
1527.988 659.39716 l
h
1527.988 663.70544 m
S
0 i
1 1 1 sc
CM
2 306.58301 m
71.467178 306.58301 l
72.019463 306.58301 72.467178 306.13531 72.467178 305.58301 c
72.467178 283.12842 l
72.467178 282.57614 72.019463 282.12842 71.467178 282.12842 c
2 282.12842 l
1.4477153 282.12842 1 282.57614 1 283.12842 c
1 305.58301 l
1 306.13531 1.4477153 306.58301 2 306.58301 c
h
2 306.58301 m
f
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1375 622.41699 m
1444.4672 622.41699 l
1445.0194 622.41699 1445.4672 622.86469 1445.4672 623.41699 c
1445.4672 645.87158 l
1445.4672 646.42383 1445.0194 646.87158 1444.4672 646.87158 c
1375 646.87158 l
1374.4478 646.87158 1374 646.42383 1374 645.87158 c
1374 623.41699 l
1374 622.86469 1374.4478 622.41699 1375 622.41699 c
h
1375 622.41699 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
1379.7275 638.01825 m
("#$%&%'\(\)*\($%+)[ 5.832000 2.835000 5.166000 5.004000 5.004000 5.004000 4.833000 1.998000 4.833000 2.835000 1.998000 5.166000 5.004000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
118.32949 306.58301 m
187.79666 306.58301 l
188.34895 306.58301 188.79666 306.13531 188.79666 305.58301 c
188.79666 283.12842 l
188.79666 282.57614 188.34895 282.12842 187.79666 282.12842 c
118.32949 282.12842 l
117.77721 282.12842 117.32949 282.57614 117.32949 283.12842 c
117.32949 305.58301 l
117.32949 306.13531 117.77721 306.58301 118.32949 306.58301 c
h
118.32949 306.58301 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1491.3295 622.41699 m
1560.7966 622.41699 l
1561.349 622.41699 1561.7966 622.86469 1561.7966 623.41699 c
1561.7966 645.87158 l
1561.7966 646.42383 1561.349 646.87158 1560.7966 646.87158 c
1491.3295 646.87158 l
1490.7772 646.87158 1490.3295 646.42383 1490.3295 645.87158 c
1490.3295 623.41699 l
1490.3295 622.86469 1490.7772 622.41699 1491.3295 622.41699 c
h
1491.3295 622.41699 m
S
/Cs1 SC
0 sc
0 i
1496.0571 638.01825 m
("#$%&%'\(\)*\($%+)[ 5.832000 2.835000 5.166000 5.004000 5.004000 5.004000 4.833000 1.998000 4.833000 2.835000 1.998000 5.166000 5.004000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
20.990841 165.05093 m
165.49084 165.05093 l
166.04312 165.05093 166.49084 164.60321 166.49084 164.05093 c
166.49084 141.59633 l
166.49084 141.04405 166.04312 140.59633 165.49084 140.59633 c
20.990841 140.59633 l
20.438555 140.59633 19.990841 141.04405 19.990841 141.59633 c
19.990841 164.05093 l
19.990841 164.60321 20.438555 165.05093 20.990841 165.05093 c
h
20.990841 165.05093 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1393.9908 763.9491 m
1538.4908 763.9491 l
1539.0431 763.9491 1539.4908 764.39679 1539.4908 764.9491 c
1539.4908 787.40369 l
1539.4908 787.95593 1539.0431 788.40369 1538.4908 788.40369 c
1393.9908 788.40369 l
1393.4386 788.40369 1392.9908 787.95593 1392.9908 787.40369 c
1392.9908 764.9491 l
1392.9908 764.39679 1393.4386 763.9491 1393.9908 763.9491 c
h
1393.9908 763.9491 m
S
0 i
1 0.75 0.75 sc
CM
49.912319 144.84328 m
49.912319 159.87392 l
51.687611 161.54398 l
67.665222 161.54398 l
67.665222 146.51335 l
65.889931 144.84328 l
h
49.912319 144.84328 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1422.9124 784.15674 m
1422.9124 769.1261 l
1424.6876 767.45599 l
1440.6653 767.45599 l
1440.6653 782.48663 l
1438.8899 784.15674 l
1422.9124 784.15674 l
1422.9124 769.1261 m
1438.8899 769.1261 l
1440.6653 767.45599 l
1438.8899 769.1261 m
1438.8899 784.15674 l
S
0 i
1 0.5 0.5 sc
CM
72.280411 144.84328 m
72.280411 159.87392 l
74.055702 161.54398 l
90.03331 161.54398 l
90.03331 146.51335 l
88.258026 144.84328 l
h
72.280411 144.84328 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1445.2804 784.15674 m
1445.2804 769.1261 l
1447.0557 767.45599 l
1463.0333 767.45599 l
1463.0333 782.48663 l
1461.2581 784.15674 l
1445.2804 784.15674 l
1445.2804 769.1261 m
1461.2581 769.1261 l
1463.0333 767.45599 l
1461.2581 769.1261 m
1461.2581 784.15674 l
S
0 i
1 0.75 0.75 sc
CM
94.648499 144.84328 m
94.648499 159.87392 l
96.42379 161.54398 l
112.40141 161.54398 l
112.40141 146.51335 l
110.62611 144.84328 l
h
94.648499 144.84328 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1467.6484 784.15674 m
1467.6484 769.1261 l
1469.4238 767.45599 l
1485.4014 767.45599 l
1485.4014 782.48663 l
1483.6261 784.15674 l
1467.6484 784.15674 l
1467.6484 769.1261 m
1483.6261 769.1261 l
1485.4014 767.45599 l
1483.6261 769.1261 m
1483.6261 784.15674 l
S
0 i
1 0.75 0.75 sc
CM
117.01659 144.84328 m
117.01659 159.87392 l
118.79188 161.54398 l
134.76949 161.54398 l
134.76949 146.51335 l
132.9942 144.84328 l
h
117.01659 144.84328 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1490.0166 784.15674 m
1490.0166 769.1261 l
1491.7919 767.45599 l
1507.7695 767.45599 l
1507.7695 782.48663 l
1505.9941 784.15674 l
1490.0166 784.15674 l
1490.0166 769.1261 m
1505.9941 769.1261 l
1507.7695 767.45599 l
1505.9941 769.1261 m
1505.9941 784.15674 l
S
0 i
1 0.75 0.75 sc
CM
27.544231 144.84328 m
27.544231 159.87392 l
29.319521 161.54398 l
45.297134 161.54398 l
45.297134 146.51335 l
43.521847 144.84328 l
h
27.544231 144.84328 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1400.5442 784.15674 m
1400.5442 769.1261 l
1402.3196 767.45599 l
1418.2971 767.45599 l
1418.2971 782.48663 l
1416.5219 784.15674 l
1400.5442 784.15674 l
1400.5442 769.1261 m
1416.5219 769.1261 l
1418.2971 767.45599 l
1416.5219 769.1261 m
1416.5219 784.15674 l
S
0 i
1 0.75 0.75 sc
CM
139.38467 144.84328 m
139.38467 159.87392 l
141.15996 161.54398 l
157.13757 161.54398 l
157.13757 146.51335 l
155.36229 144.84328 l
h
139.38467 144.84328 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1512.3846 784.15674 m
1512.3846 769.1261 l
1514.1599 767.45599 l
1530.1376 767.45599 l
1530.1376 782.48663 l
1528.3623 784.15674 l
1512.3846 784.15674 l
1512.3846 769.1261 m
1528.3623 769.1261 l
1530.1376 767.45599 l
1528.3623 769.1261 m
1528.3623 784.15674 l
S
0 i
1 0.5 0.5 sc
CM
25.213791 207.79092 m
42.966698 207.79092 l
42.966698 191.09023 l
25.213791 191.09023 l
h
25.213791 207.79092 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1398.2137 721.20905 m
1415.9667 721.20905 l
1415.9667 737.90979 l
1398.2137 737.90979 l
h
1398.2137 721.20905 m
S
0 i
1 0.5 0.5 sc
CM
52.33511 207.79092 m
70.088013 207.79092 l
70.088013 191.09023 l
52.33511 191.09023 l
h
52.33511 207.79092 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1425.3351 721.20905 m
1443.088 721.20905 l
1443.088 737.90979 l
1425.3351 737.90979 l
h
1425.3351 721.20905 m
S
0 i
1 0.5 0.5 sc
CM
114.28912 207.79092 m
132.04202 207.79092 l
132.04202 191.09023 l
114.28912 191.09023 l
h
114.28912 207.79092 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1487.2891 721.20905 m
1505.042 721.20905 l
1505.042 737.90979 l
1487.2891 737.90979 l
h
1487.2891 721.20905 m
S
0 i
1 0.5 0.5 sc
CM
141.2869 207.74934 m
159.03979 207.74934 l
159.03979 191.04865 l
141.2869 191.04865 l
h
141.2869 207.74934 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1514.2869 721.25067 m
1532.0398 721.25067 l
1532.0398 737.95135 l
1514.2869 737.95135 l
h
1514.2869 721.25067 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
1458.1886 732.80444 m
(!)s
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
1454.1289 767.45599 m
1454.0873 755.05505 l
S
0 i
CM
81.055122 183.54489 m
77.48732 173.93289 l
84.687279 173.95702 l
h
81.055122 183.54489 m
f
0 J
0 j
1 0 0 -1 -1373 929 cm
1454.0552 745.45508 m
1450.4873 755.06714 l
1457.6873 755.04297 l
h
1454.0552 745.45508 m
S
1 1 1 sc
CM
20.990841 25.253201 m
165.49084 25.253201 l
166.04312 25.253201 166.49084 24.805485 166.49084 24.253201 c
166.49084 1.7986047 l
166.49084 1.2463199 166.04312 0.79860473 165.49084 0.79860473 c
20.990841 0.79860473 l
20.438555 0.79860473 19.990841 1.2463199 19.990841 1.7986047 c
19.990841 24.253201 l
19.990841 24.805485 20.438555 25.253201 20.990841 25.253201 c
h
20.990841 25.253201 m
f
1 w
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1393.9908 903.74683 m
1538.4908 903.74683 l
1539.0431 903.74683 1539.4908 904.19452 1539.4908 904.74683 c
1539.4908 927.20142 l
1539.4908 927.75366 1539.0431 928.20142 1538.4908 928.20142 c
1393.9908 928.20142 l
1393.4386 928.20142 1392.9908 927.75366 1392.9908 927.20142 c
1392.9908 904.74683 l
1392.9908 904.19452 1393.4386 903.74683 1393.9908 903.74683 c
h
1393.9908 903.74683 m
S
0 i
1 0.75 0.75 sc
CM
49.912319 5.0455527 m
49.912319 20.076181 l
51.687611 21.746252 l
67.665222 21.746252 l
67.665222 6.7156229 l
65.889931 5.0455527 l
h
49.912319 5.0455527 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1422.9124 923.95447 m
1422.9124 908.92383 l
1424.6876 907.25372 l
1440.6653 907.25372 l
1440.6653 922.28436 l
1438.8899 923.95447 l
1422.9124 923.95447 l
1422.9124 908.92383 m
1438.8899 908.92383 l
1440.6653 907.25372 l
1438.8899 908.92383 m
1438.8899 923.95447 l
S
0 i
1 0.5 0.5 sc
CM
72.280411 5.0455527 m
72.280411 20.076181 l
74.055702 21.746252 l
90.03331 21.746252 l
90.03331 6.7156229 l
88.258026 5.0455527 l
h
72.280411 5.0455527 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1445.2804 923.95447 m
1445.2804 908.92383 l
1447.0557 907.25372 l
1463.0333 907.25372 l
1463.0333 922.28436 l
1461.2581 923.95447 l
1445.2804 923.95447 l
1445.2804 908.92383 m
1461.2581 908.92383 l
1463.0333 907.25372 l
1461.2581 908.92383 m
1461.2581 923.95447 l
S
0 i
1 0.75 0.75 sc
CM
94.648499 5.0455527 m
94.648499 20.076181 l
96.42379 21.746252 l
112.40141 21.746252 l
112.40141 6.7156229 l
110.62611 5.0455527 l
h
94.648499 5.0455527 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1467.6484 923.95447 m
1467.6484 908.92383 l
1469.4238 907.25372 l
1485.4014 907.25372 l
1485.4014 922.28436 l
1483.6261 923.95447 l
1467.6484 923.95447 l
1467.6484 908.92383 m
1483.6261 908.92383 l
1485.4014 907.25372 l
1483.6261 908.92383 m
1483.6261 923.95447 l
S
0 i
1 0.75 0.75 sc
CM
117.01659 5.0455527 m
117.01659 20.076181 l
118.79188 21.746252 l
134.76949 21.746252 l
134.76949 6.7156229 l
132.9942 5.0455527 l
h
117.01659 5.0455527 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1490.0166 923.95447 m
1490.0166 908.92383 l
1491.7919 907.25372 l
1507.7695 907.25372 l
1507.7695 922.28436 l
1505.9941 923.95447 l
1490.0166 923.95447 l
1490.0166 908.92383 m
1505.9941 908.92383 l
1507.7695 907.25372 l
1505.9941 908.92383 m
1505.9941 923.95447 l
S
0 i
1 0.75 0.75 sc
CM
27.544231 5.0455527 m
27.544231 20.076181 l
29.319521 21.746252 l
45.297134 21.746252 l
45.297134 6.7156229 l
43.521847 5.0455527 l
h
27.544231 5.0455527 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1400.5442 923.95447 m
1400.5442 908.92383 l
1402.3196 907.25372 l
1418.2971 907.25372 l
1418.2971 922.28436 l
1416.5219 923.95447 l
1400.5442 923.95447 l
1400.5442 908.92383 m
1416.5219 908.92383 l
1418.2971 907.25372 l
1416.5219 908.92383 m
1416.5219 923.95447 l
S
0 i
1 0.75 0.75 sc
CM
139.38467 5.0455527 m
139.38467 20.076181 l
141.15996 21.746252 l
157.13757 21.746252 l
157.13757 6.7156229 l
155.36229 5.0455527 l
h
139.38467 5.0455527 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1512.3846 923.95447 m
1512.3846 908.92383 l
1514.1599 907.25372 l
1530.1376 907.25372 l
1530.1376 922.28436 l
1528.3623 923.95447 l
1512.3846 923.95447 l
1512.3846 908.92383 m
1528.3623 908.92383 l
1530.1376 907.25372 l
1528.3623 908.92383 m
1528.3623 923.95447 l
S
0 i
1 1 1 sc
CM
94.11348 28.16791 m
90.263657 28.16791 l
90.263657 32.476192 l
88.338745 32.476192 l
92.188568 43.476192 l
96.038391 32.476192 l
94.11348 32.476192 l
h
94.11348 28.16791 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1467.1135 900.83209 m
1463.2637 900.83209 l
1463.2637 896.5238 l
1461.3387 896.5238 l
1465.1886 885.5238 l
1469.0385 896.5238 l
1467.1135 896.5238 l
h
1467.1135 900.83209 m
S
0 i
0.75 1 1 sc
CM
21.990841 71.85244 m
164.49084 71.85244 l
165.59541 71.85244 166.49084 70.957016 166.49084 69.85244 c
166.49084 49.397846 l
166.49084 48.293278 165.59541 47.397846 164.49084 47.397846 c
21.990841 47.397846 l
20.886271 47.397846 19.990841 48.293278 19.990841 49.397846 c
19.990841 69.85244 l
19.990841 70.957016 20.886271 71.85244 21.990841 71.85244 c
h
21.990841 71.85244 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1394.9908 857.14758 m
1537.4908 857.14758 l
1538.5955 857.14758 1539.4908 858.04297 1539.4908 859.14758 c
1539.4908 879.60217 l
1539.4908 880.70673 1538.5955 881.60217 1537.4908 881.60217 c
1394.9908 881.60217 l
1393.8862 881.60217 1392.9908 880.70673 1392.9908 879.60217 c
1392.9908 859.14758 l
1392.9908 858.04297 1393.8862 857.14758 1394.9908 857.14758 c
h
1394.9908 857.14758 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
1446.2368 872.87488 m
(,-./0)[ 8.220000 6.672000 7.776000 6.888000 0.000000 ] xS
/Cs2 SC
0.75 1 1 sc
CM
21.990841 118.45168 m
164.49084 118.45168 l
165.59541 118.45168 166.49084 117.55626 166.49084 116.45168 c
166.49084 95.997093 l
166.49084 94.892525 165.59541 93.997093 164.49084 93.997093 c
21.990841 93.997093 l
20.886271 93.997093 19.990841 94.892525 19.990841 95.997093 c
19.990841 116.45168 l
19.990841 117.55626 20.886271 118.45168 21.990841 118.45168 c
h
21.990841 118.45168 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 929 cm
1394.9908 810.54834 m
1537.4908 810.54834 l
1538.5955 810.54834 1539.4908 811.44373 1539.4908 812.54834 c
1539.4908 833.00293 l
1539.4908 834.10748 1538.5955 835.00293 1537.4908 835.00293 c
1394.9908 835.00293 l
1393.8862 835.00293 1392.9908 834.10748 1392.9908 833.00293 c
1392.9908 812.54834 l
1392.9908 811.44373 1393.8862 810.54834 1394.9908 810.54834 c
h
1394.9908 810.54834 m
S
/Cs1 SC
0 sc
0 i
1446.2368 826.27563 m
(,-./0)[ 8.220000 6.672000 7.776000 6.888000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
94.11348 75.270622 m
90.263657 75.270622 l
90.263657 79.578911 l
88.338745 79.578911 l
92.188568 90.578911 l
96.038391 79.578911 l
94.11348 79.578911 l
h
94.11348 75.270622 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1467.1135 853.72937 m
1463.2637 853.72937 l
1463.2637 849.42108 l
1461.3387 849.42108 l
1465.1886 838.42108 l
1469.0385 849.42108 l
1467.1135 849.42108 l
h
1467.1135 853.72937 m
S
0 i
1 1 1 sc
CM
94.11348 121.86987 m
90.263657 121.86987 l
90.263657 126.17815 l
88.338745 126.17815 l
92.188568 137.17815 l
96.038391 126.17815 l
94.11348 126.17815 l
h
94.11348 121.86987 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 929 cm
1467.1135 807.13013 m
1463.2637 807.13013 l
1463.2637 802.82184 l
1461.3387 802.82184 l
1465.1886 791.82184 l
1469.0385 802.82184 l
1467.1135 802.82184 l
h
1467.1135 807.13013 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
1557.9561 779.55035 m
(-./012&*3&*)[ 5.004000 5.832000 5.166000 7.839000 2.502000 6.840000 5.004000 2.835000 5.337000 5.004000 0.000000 ] xS
1558.46 919.43811 m
(,45/12&*3&*)[ 6.165000 5.499000 6.003000 5.166000 2.502000 6.840000 5.004000 2.835000 5.337000 5.004000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
