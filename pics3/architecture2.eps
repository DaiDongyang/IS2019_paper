%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 176.000000 321.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 176 321
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 176 321
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /m put
dup 36 /a put
dup 37 /n put
dup 38 /t put
dup 39 /i put
dup 40 /c put
dup 41 /space put
dup 42 /F put
dup 43 /u put
dup 44 /r put
dup 45 /q put
dup 46 /P put
dup 47 /hyphen put
dup 48 /d put
dup 49 /B put
dup 50 /E put
dup 51 /R put
dup 52 /T put
dup 53 /N put
dup 54 /b put
dup 55 /s put
dup 56 /l put
dup 57 /fi put
dup 58 /C put
dup 59 /h put
dup 60 /L put
dup 61 /parenleft put
dup 62 /o put
dup 63 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020024FF3B020E02110013002C00A9B8002D2FBA0015000A00032BB8001510B8002D10B80022D0B800222FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8000A10B80017D0B800172FB8000A10B8002AD0B8002A2FB8000A10B8002CD0B8002C2F00B800142FBA001D000500032BB8001D10BA000F002700032BB8000F10303137343E0233321E0215140E0223222E0201112315232E0323220E0215141E023332363733117E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645FE6102CA45171F13082B49623737624A2C262BFEF50000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB80015DCB8000B10B8003CDC00BA0036000600032BB8003610BA0025001A00032BB8002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B800

00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/hyphen 4 def
/B 5 def
/C 6 def
/E 7 def
/F 8 def
/L 9 def
/N 10 def
/P 11 def
/R 12 def
/S 13 def
/T 14 def
/a 15 def
/b 16 def
/c 17 def
/d 18 def
/e 19 def
/h 20 def
/i 21 def
/l 22 def
/m 23 def
/n 24 def
/o 25 def
/q 26 def
/r 27 def
/s 28 def
/t 29 def
/u 30 def
/fi 31 def
/uni2B91 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9312448060975EE3A7373C3A15976847AEC4213ADF0F8E546DBAEAEDA0492FEE740BA701036C7ADAA121D9C61DA187FF3C7BE4F830B1C5ED214DE2BB5E6884718B3ED5699043FC5FE98B71D5385A818F2704E89E4E3A5BC8490E399F8998A3F5371AF5AE0AF46558A8E8F67A7C616EDC5462D750EB448D9A6EFD2AEC369A8F884125BA42685E6B5D78558A55C3628D3BD3011BEBDAA61EB1AB3EDB325E3A1412C2DBE93FF26670354FDF445A5E3E042B23901326E4521272DABB21EF9DAADE5031CAFB1DC6C18AC0828230280D34AB4E5FF48AC607EE718AF46C57C54420398B4D3735D5593A1D2D0B7A2166D97E910025F26B715BF161AC0A6FF1CF63D5F8640B8DDDC7A83A9E365D9C52514405E19E66E3AA20E75F6C62AF3F24CB8CE33ED0577252F297DAA89F2F911558A80150E1522C6FF528777CEECD26FEBF5661675378B6589B55CD499D3A33872F2EC86293B0378CFBBD96D3DD8B28C798EBA5E7A5F33A93A6A2977CCD43A891BCA6A02499E68FC8915A86E5CBC6D005993D3DFCA33D0724724B69730F7F30BB07B335D00156682C6CD11FB256A01CED37F2943A72A24C3D459A340B3190D33A2992A2C343D9A2716B7153B9C4DAE4322ED974E9E6CB6D3CCEBA471C25E3A50443B0845EBBBA5111C9C92C8738083F1E083B4BF172A568AC718F1AEBBE9BFC1CC03B57FF02BBDFA686126A3954C39E250D2B600B8CDCB19308C28C9072DFD4FC378CFCA1B11EEA1524B5F1BDE158CE093C7D99DB1D2F

7B3FEDF1CBD670729FF436654B95177037DD16C2D395FF15AEB3A600C6082088F478116BDE60088966ADDC7091BB50EBDD8FB3BC760E6F2C4D4CE32CC2E5EBD11BA724CFE5A083EDA97EA6DC851970B9BB0AF7CCB5B89CB6BA8765A584CB08A6DDA6606CFACCD883CEC67D01B5D897FCFD6FBB21C5621B15CAC05E11BCA7127846F93DCCDF2E3BAADC476933C5604BEAE4B15720E62C10C65D457E773B29F41408CAF3AD8BAABCF7935C3CCBA25EB0EE3C5181128D5C796C9904CFAE588F655BF7B96A6FE02EAD3CAFE6274DFD4CF355BBB7C779D124F6E43230CD9EED3E5E7D56FCE94231004FCA229F0E202E7451F75E012C48E9999B828765B8C4D611741BA2EBAE2D7FE4C89F642177AF81873446E01D85365E9EB87BAFBFC2D714A4FF33F34D4333B75BF72A48CBEEEC468FB4E7DB3255F22B472934B265B360947769F5CF9808498A2F05264271902E3C1F0860D247E58D32DEAC4F2CBF1526CE04C52DBDF6F811E991B011055F81E77F697F360DF1FA97206831369946B2A6976A1ECB28223EC88C8510959552DC51119B74F6DA31A0DE7935A84E78ECF514338089599EFBC3CC9D4CEC1797ED9BD64EE095BB21E89CFD24525DAF87DB5DD17DA69748B50670AF962F70E8CF9EE6A0060A652853525F138609D3F28842100D0C6A01C8DDB8CB3436952BF98F1F5D4E3C54A5F676DD8820A551A89B9FB65D9A0EB4E7D2CD3DE1E08602FD138A0319BBECF5A62761DE1A7D02050C8C742436AE1A04226654B7027133394F7801B4BC3914CB49DF7BA74949A94321146F521DAC539DB5B92A20A5F7EF7E76F4CEBB6CA3A82BA6B71FA0F0DF5600A7B4496FE67AC0BFF49334000ECBDB6FD71A55FF6B60C90035E362F7766DF5AAA73225A0F44E76ED048C82C165378EFAEEA77B5FF127ECC999C5B4E794FF99EFB7557BC42CF90EC5466D805EAB14A62C5170D208D9BC214C7D5FC50E653691A6348459573B70B4DF16716279E0C440A956E19609B9553DFE30992DEE2327516527D7B6CCA4815612B4642CE6614D9A15976312C9ABEF0E7A07417225E780C12AA29DB4D05AF27B0F973C8B095A125A6D2244ED0713D443704F2949BEC71664555F3FE4C60D3470EB2F7EDC28BB25A7557EEEF256888C51D9049D060286EC6A652F9AAAED913D3F2D718EEDA74CF01E12854DD8B20E4895E0F0AA27E2C91B4EB277D7B4B155E1451632AB0E5E7E3F75B7575D67EB9E9EAE080634067DFFAEDC67C8E6CDF34D7DE43410425FC260996A3E40F8D25C8F0BAE0F47EA6C88094C3E5A922DEF38CBD4E0FE90FE6BC9289BEFC9BE664DF11574AD18A690ED594FCF9CD5B36910EB5529A5C3AF0AE500D97CE72148977AE8A7B6B75281A3316BC3DEFEE2F9C50D8CCB71E5EBA521682181AB967B6D12CF28C26AB82717386A3DD373CCAB3DD105B2E42B54884741
082BC7318FD83D5BBD2A1A6D93A3587FA866D4AB872A85CAE44BA80CFD989CFCECF3D14B2A339910E505895FF32715E0A9DD88713185B5DE1477AE98282622FA0402C8DED256B119808B59DEC9255889CDD8DF5CA638CC04881E2C884A6F5F135144E69099E60DC60E85D237EB68D61EA596F7E9D6E43E0E1501B21E253D5E410685C3688BBFABB9C3D62BB66BFA9E974A91647976B798F8295D9A995D9D0A4BD7D0F44ECA8440B7C6E07FC089BECBD87BC74C3AA3BCE43B0FE8C4E9F1C5157F9DDDB31867158B829EA9B395ED36865BC3A8C56C5AADFCA095291B25480220BAACE18F8542C300C3D110BB0D22434BD044768664800D1BABF306085B94210F00C27D06B2292F0FFCC10828A6A8A8B450342FAB864AD3E047498246DEAAAEAED807D20FE666B3B2B75C069BF201BE4FE7913DC5F5EB0C0E2A66D92065986231C69E8D0549AFCEC2E063A28E5A3B9AFB5B2D3582FFF01A3327225C2247EA79F1490FC7E342C0AF01D86FAADED012BEDD7A7FB65505FCA72660B97B7F43172F0919F3837C17CAEC27FC87216BBF094161D7C931ABCD511092D594CA5FAE04A579FCF13438446779F043AC2C7CCEB6AEF52E185386C5D317E3AC7992664C98D6A1B34E2B779BBA484483700436F08DE6959089ABF5EE6A772ED9DC198CECEA2587B0F3C501D1D88068393108B2A13027AF4F16DAE09A6226FA911FFE5670017131CA89247284489504A87A75709951687B3D3C5B62331EAB8564BD4859C1517DA1B20975F73F9C54D3BF9BE6C46BC8DA4C4E32759EB34D51B515F9AB18FCE193B4EB067B3757296C916457FD954D63282E0BA64370EC7E444D9A551F4795FA2EBA123D6A245FB785B3DA6356F0FB1F51CECA2775A528966A8283E93EAE4ACD0363BE9A0D2659E3B4876D329515C91134D0D8F61CDCCB0C1603E825D9D2387BC9A9143229FBF0DF33564BDC5FAC62D56B15F4EC4653319DE42EC3C66E6CB247B77DA7928135086D8602C400ACC631D6048313770817CC5600AF66C674AA497209431C7D3F5A73AE24ADC6B50E43D04AC54EE9F94F19F48BBA27C1CE12BF61D0E52F95D481F1D2546D082230D7641A335C0D5690DB196E6450D9B314185BDB10972464251DAB8AF86BF0A348384A15D3F9EE2EBD73C0B1AB1BFDD941D91A0E9C9DB00FF59064D437ED20AB9F6A23DBB6DCEF8D87540A85F16A6281FF590B0E77F30A2B0BAD54BC3828E8E25EA0D1FDD36F6896FF7F208BAF4D3E7CC1E9BA80F58A5F32BB5023296BEA913F1D8A3424ED44D688B4CEE5D6F6378368882BD457519B044EE709E029CEC5A3B78545F0AA31036EED7647A3421BE1C8BC7D115A1CAC01E2478E31073A35C71E9C31BBAAB48B31F4366E07BFCF566277D2723FA02D84279242DF00B22811909B1E1A66D7A7B79CB188204F54D9EEF99BFE05B0641948EB28EF

1C22574D55F6605E6079EC63FC5BB7D90CD37D8533561D627B8A457A026DDD34A0A9535E26EAABF6BAC96439BD75AE1F8CDA74118A287A028F58AC8EC4687058F73A12DDC82BD47B30EB5BAFB48698591A2BBA933AF86DA2A91691D79207B01A45C39B30DD60085FF0BDCB66B84BE60190DB074F2A9F1A61CE6306448E591C4C8056803C3062FB1A906030C86FFEE3D407F1CC2582AAF7E8104E58A76D4C1165E0E69C075E0A8C77959C4816992F5739A322110B5EDF1E266C1DCBA2B7C6FB752AD7FE203F04037ED17835A58BC1DF4A6FB7DA3338F4033A33FE98AF7B477078E0047E29C21090D6404020892A291F24F5370534CAFEE297B0B46D6A030EC614CEA5115C4D0DBA3E8C9FE41E2B85C6EC27D5D2FDA2F55B43B5EA52A96B2BC9F6F9632A5E20000AA941217405ADD9D5E06CCA5B09C48DADE7581B201A26051B2F479560F90A38C3AD78E91E705A46FF5E1AEC55552D4B4C2323A51B30B7FF5B18BD550DB5AF225AD7647C20D61CCC6CDDB1A058BDAEFD40C2FB80CAD04A443FA2EAD8594471FDB58C405D6DFED814FBF066F866D272BED48A53A4DF878612232E16CC1BC10430DA91BF805865ECE8EB73C3040C325F1C559864DEA4A890420B72D0145403989468F01685CB32F83738C371965761634A37CB47CC7C13E77DC0847B91E0ED76083054F819CC276407E05C6CFA6FC6B6A4243DCF99EEE5A03BE17BEB64A226D5AE96F9135DAF2406E0E2EE6BB2AF13E655040E73540D2AA7D79DA028A8270C0006D4C3874B60C667A89D23EA7ABEC88BEB145AB6DE43ABAF9E1B1219FEBE2EA61F2340374E8D7CDCF7A6DD74A254209F65362A259F9AB31C15361CBC9566B18A554B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 176 321 rc
0 321 m
176 321 l
176 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-888.42108 1089.421 m
1760 1089.421 l
1760 -1163.2106 l
-888.42108 -1163.2106 l
h
-888.42108 1089.421 m
f
5 179.40805 m
171.5 179.40805 l
173.15686 179.40805 174.5 178.0649 174.5 176.40805 c
174.5 144.40805 l
174.5 142.75119 173.15686 141.40805 171.5 141.40805 c
5 141.40805 l
3.3431458 141.40805 2 142.75119 2 144.40805 c
2 176.40805 l
2 178.0649 3.3431458 179.40805 5 179.40805 c
h
5 179.40805 m
f
2 w
1 J
1 j
[
8
8
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
59 339.59195 m
225.5 339.59195 l
227.15686 339.59195 228.5 340.93509 228.5 342.59195 c
228.5 374.59195 l
228.5 376.24881 227.15686 377.59195 225.5 377.59195 c
59 377.59195 l
57.343147 377.59195 56 376.24881 56 374.59195 c
56 342.59195 l
56 340.93509 57.343147 339.59195 59 339.59195 c
h
59 339.59195 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
79.417999 355.14395 m
(!"#$%&'\(\)*"$&+,")[ 10.368000 8.592000 13.648000 8.592000 8.896000 5.040000 3.552000 8.592000 4.448000 9.184000 8.592000 8.592000 5.040000 8.896000 5.040000 0.000000 ] xS
104.018 373.59195 m
(\)!"-+"%\(")[ 4.448000 10.368000 8.592000 9.488000 8.896000 8.592000 8.896000 8.592000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
4 109.31609 m
170.5 109.31609 l
172.15686 109.31609 173.5 107.97295 173.5 106.31609 c
173.5 74.316086 l
173.5 72.659233 172.15686 71.316086 170.5 71.316086 c
4 71.316086 l
2.3431458 71.316086 1 72.659233 1 74.316086 c
1 106.31609 l
1 107.97295 2.3431458 109.31609 4 109.31609 c
h
4 109.31609 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
58 409.6839 m
224.5 409.6839 l
226.15686 409.6839 227.5 411.02707 227.5 412.6839 c
227.5 444.6839 l
227.5 446.34076 226.15686 447.6839 224.5 447.6839 c
58 447.6839 l
56.343147 447.6839 55 446.34076 55 444.6839 c
55 412.6839 l
55 411.02707 56.343147 409.6839 58 409.6839 c
h
58 409.6839 m
S
/Cs1 SC
0 sc
0 i
81.538002 433.6839 m
(.,"/&$'%"0\)1234)[ 10.368000 5.040000 8.592000 6.224000 5.040000 8.592000 3.552000 8.896000 8.592000 9.488000 4.448000 10.960000 9.776000 10.672000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
92.104271 44.397503 m
82.395729 44.397503 l
82.395729 55.142723 l
77.541458 55.142723 l
87.25 66.142723 l
96.958542 55.142723 l
92.104271 55.142723 l
h
92.104271 44.397503 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 474.60251 m
136.39572 474.60251 l
136.39572 463.85727 l
131.54146 463.85727 l
141.25 452.85727 l
150.95854 463.85727 l
146.10428 463.85727 l
h
146.10428 474.60251 m
S
0 i
1 1 1 sc
CM
92.104271 114.48946 m
82.395729 114.48946 l
82.395729 125.23468 l
77.541458 125.23468 l
87.25 136.23468 l
96.958542 125.23468 l
92.104271 125.23468 l
h
92.104271 114.48946 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 404.51053 m
136.39572 404.51053 l
136.39572 393.76532 l
131.54146 393.76532 l
141.25 382.76532 l
150.95854 393.76532 l
146.10428 393.76532 l
h
146.10428 404.51053 m
S
0 i
1 1 1 sc
CM
92.104271 184.58141 m
82.395729 184.58141 l
82.395729 195.32663 l
77.541458 195.32663 l
87.25 206.32663 l
96.958542 195.32663 l
92.104271 195.32663 l
h
92.104271 184.58141 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 334.41858 m
136.39572 334.41858 l
136.39572 323.67337 l
131.54146 323.67337 l
141.25 312.67337 l
150.95854 323.67337 l
146.10428 323.67337 l
h
146.10428 334.41858 m
S
0 i
0.75 1 0.75 sc
CM
5 249.5 m
171.5 249.5 l
173.15686 249.5 174.5 248.15686 174.5 246.5 c
174.5 214.5 l
174.5 212.84314 173.15686 211.5 171.5 211.5 c
5 211.5 l
3.3431458 211.5 2 212.84314 2 214.5 c
2 246.5 l
2 248.15686 3.3431458 249.5 5 249.5 c
h
5 249.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
59 269.5 m
225.5 269.5 l
227.15686 269.5 228.5 270.84314 228.5 272.5 c
228.5 304.5 l
228.5 306.15686 227.15686 307.5 225.5 307.5 c
59 307.5 l
57.343147 307.5 56 306.15686 56 304.5 c
56 272.5 l
56 270.84314 57.343147 269.5 59 269.5 c
h
59 269.5 m
S
/Cs1 SC
0 sc
0 i
72.921997 293.5 m
(55\)6$7"0\)\(8$77'9",)[ 11.552000 11.552000 4.448000 9.488000 8.592000 8.000000 8.592000 9.488000 4.448000 8.592000 3.552000 8.592000 8.000000 8.000000 3.552000 8.288000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
5 39.224133 m
171.5 39.224133 l
173.15686 39.224133 174.5 37.880989 174.5 36.224133 c
174.5 4.2241344 l
174.5 2.5672801 173.15686 1.2241342 171.5 1.2241342 c
5 1.2241342 l
3.3431458 1.2241342 2 2.5672801 2 4.2241344 c
2 36.224133 l
2 37.880989 3.3431458 39.224133 5 39.224133 c
h
5 39.224133 m
f
[
8
8
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
59 479.77588 m
225.5 479.77588 l
227.15686 479.77588 228.5 481.11902 228.5 482.77588 c
228.5 514.77588 l
228.5 516.43274 227.15686 517.77588 225.5 517.77588 c
59 517.77588 l
57.343147 517.77588 56 516.43274 56 514.77588 c
56 482.77588 l
56 481.11902 57.343147 479.77588 59 479.77588 c
h
59 479.77588 m
S
/Cs1 SC
0 sc
0 i
68.762001 503.77588 m
(:;$,$\(&",\)!"-+"%\(")[ 11.552000 8.896000 8.592000 5.328000 8.592000 8.592000 5.040000 8.592000 5.328000 4.448000 10.368000 8.592000 9.488000 8.896000 8.592000 8.896000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
5 319.59195 m
171.5 319.59195 l
173.15686 319.59195 174.5 318.24881 174.5 316.59195 c
174.5 284.59195 l
174.5 282.93509 173.15686 281.59195 171.5 281.59195 c
5 281.59195 l
3.3431458 281.59195 2 282.93509 2 284.59195 c
2 316.59195 l
2 318.24881 3.3431458 319.59195 5 319.59195 c
h
5 319.59195 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
59 199.40805 m
225.5 199.40805 l
227.15686 199.40805 228.5 200.75119 228.5 202.40805 c
228.5 234.40805 l
228.5 236.0649 227.15686 237.40805 225.5 237.40805 c
59 237.40805 l
57.343147 237.40805 56 236.0649 56 234.40805 c
56 202.40805 l
56 200.75119 57.343147 199.40805 59 199.40805 c
h
59 199.40805 m
S
/Cs1 SC
0 sc
0 i
61.498001 223.40805 m
(<$6"87=.,>%+%\('$&'$%7?)[ 8.896000 8.592000 9.488000 8.592000 3.552000 8.000000 4.144000 10.368000 5.040000 9.184000 8.896000 8.896000 8.896000 8.592000 3.552000 8.592000 5.040000 3.552000 8.592000 8.896000 8.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
92.104271 254.67337 m
82.395729 254.67337 l
82.395729 265.41858 l
77.541458 265.41858 l
87.25 276.41858 l
96.958542 265.41858 l
92.104271 265.41858 l
h
92.104271 254.67337 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 264.32663 m
136.39572 264.32663 l
136.39572 253.58141 l
131.54146 253.58141 l
141.25 242.58141 l
150.95854 253.58141 l
146.10428 253.58141 l
h
146.10428 264.32663 m
S
ep
end
%%Trailer
%%EOF
