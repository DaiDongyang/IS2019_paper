%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 294.000000 332.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 294 332
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 294 332
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /m put
dup 36 /a put
dup 37 /n put
dup 38 /t put
dup 39 /i put
dup 40 /c put
dup 41 /space put
dup 42 /f put
dup 43 /u put
dup 44 /r put
dup 45 /s put
dup 46 /q put
dup 47 /D put
dup 48 /L put
dup 49 /b put
dup 50 /l put
dup 51 /O put
dup 52 /p put
dup 53 /o put
dup 54 /k put
dup 55 /T put
dup 56 /B put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/D 3 def
/L 4 def
/O 5 def
/S 6 def
/T 7 def
/a 8 def
/b 9 def
/c 10 def
/e 11 def
/f 12 def
/i 13 def
/k 14 def
/l 15 def
/m 16 def
/n 17 def
/o 18 def
/p 19 def
/q 20 def
/r 21 def
/s 22 def
/t 23 def
/u 24 def
/uni2B91 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9264C9384F249EBFD8DD5BFBB9BE844B0E83BCFE532E688793A86D21BB50B73F1E4CB55B3332FA078523601D7D59E771AAD72B0C3150466C78199AB7245DDDDDB744BE485E1956EC9C8F9F94015171004093B221EFCEA2ED2C5237FD6408A1F600E98635D7DADBE3773BA9B8069D63102F93049876AAA8822F0F1F041FA1346C10EA965A143BBE01D165E31B8687728FC59FFA1F52C499B048A5E33F3CB2EB14529B5291745A937F962E0F543E59A18B9CCD2A91638E3B6AC091BF67C8CAE32D06C7098F4B4F70663C20502D47D28BBAAE13055B7E0DD16D2069213AC290CCED80C5D0B67D908CBEDCE8AFC363160E3D07E5C3C89BA5E1A8A4A04B8D378F717D55C069CC96573E94C13AC662F439B2B8E736D2579706EEB56E1FD1C0E8AD9DB6F461647A998CE25D24BF26F379594908469051AD1A1F22EB9F1C06EBA7CFD9E1C65BE449020B03ECF634B1E8780B96A5B3AAF42E1EF758EE3654645398326BB4EAC12D8467BC0D27DE1468F750190F11691416059F9C0D9F9E12F9B7815D51090F93A0E817428A9EA605F464526DCD1C7F761DC14687188E22EA97C83D8A49834F2CD5A8122B464619A5DAF81B0EE16E2066AF7F1E7684F93683D8ED3D916EDE175943E382D1616C2315F0384B7B16E52B9716CCB53687FDC746126E95B02AF3DD6F1C656E5309DEF04F527B60174B16F489910C80D2CE802E7724AAADF3A53C279F61DA2B5DEBDA169D865C2FA4C33897F03702A3B81722F9A10E7587F21B3248


E219ED99518BF271414DC6DEDF653937789DE5E3B5B0E96D71B2064C93A62724C50DE30F6356E9E133760C3838AEA00A2DAF4E8F1957F630387F634A0D8E35347BEA310BE65D6E21C225E48C34EE84D0B41CBA5235B00CF7EECB61C77815525816BEC3ECBD2A2C966030443E899712BF159490A81CD82EF80CC18105769CB647DC8A092959018FE2D034D3E9A2CC2F29A3259A71573A30BABE6BDBBA3644DB2496FDFFA20C2E4786D3114210367663861F6101AA341792903DE706E509C5E896D6F835F6F1E75DB9912CFE1FA029D5E19016AD712FBE86874894CDBC206A18363DE7361C1476729D9F3DBB3DAE57B98EA66F16A0520EB9EC6416AEC814D7E048F44C3BA6CA3CFD1947B330B966C52A7693E86226B37BB117FA4481790BA2580C9414CD3774CA6CAFB642C5D8D143EEB25294646593A7C80033EF420998D13B237A46B5ECADF769375AB9A09CD0F8109DA8CF5DDA1DA1A1819C652829A14444B5BDD26C9DDAA33A0C4B17B16EBD5F569F81E167CEC456E237934FAFAEFD021A8D5FC661C3A3115852503673358309AB9159452E18C6198106BCD77160F56E53D3CE80FD9E4FFEA19DF753CD92FBBCA687E5A6E3A51C65CDDED051822400697CC1F21EF408676A9F00333D0E1834FDF142FD3B3F67965CD26DD5445C456B7E86D214A7939B4B3600942B93DE6087B87EA057569EC7000FA84B8DACEEB40D6BAD9BB44DCF294EFA29802B4051C6388AF86168AF618F7E1BDEA87992EB806F1FE7C057D41B3AF9BB32114864AF2DBDEB1B8D9949446E1B9D18CB9C779216967C0A23E0DF68992DD0CF0DE7583EA07C55C560C7F6A149C67E7B58123B36A47882F000B52A72EEF45E9BC2AF1B19A324EBDA28A3B2F19E26A7A7001A1F22718DB36CE7B2CA6BB9FCC801C9BCA4EDFD9E4956E9CF077BBF63758C905DC8ACFFF0520AEE23DE0E93C59D2E2237FC135076DA75E07040217B4939646D0A947FE01538E212B9E6A121688562B421ECA2171114D901FAB4D047DC0FD07BC239CD73FB5DDD96D38D369D4F3B1D5F938DF3FA45E5820239370296EA2BCBC8755A5A909E56E42518DEA1B297273D7B793FC17EAED86437060C8F04402858B8DBE51FB023B5FA42BE0BF303E09C1B2179C69142F278890B8D80433C0BF0CB73CB9B09A74E29162737C59733B5401B60B5ED1B393D2387693E0A53E3EF82407ED9FECA3F1D64ABD8D66DEA93295ED64FC2798214DCDB5E230A8F3D2207D35240D9FA5F21BE0C92F426DD12F9B1532A73294167EEB248A1370FEC8FEEAB9068CEF4FA2D67EE45605761B0C8794930FCF01EC2B0FA245E96650599308154EE0FF8E67FE162A7C203989D7F1023F187E586A8AAED01DE959DF2810C0597BB1FE8DF773D0E253D9E4BE881B2AF247E356C840E99FCF2952770B474F2A13AC44D81FC910A35BF0598D30D

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 294 332 rc
0 332 m
294 332 l
294 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-894 1140 m
1772 1140 l
1772 -1235 l
-894 -1235 l
h
-894 1140 m
f
1.2684824 32.5 m
180.5 32.5 l
180.5 4.0678391 l
1.2684824 4.0678391 l
h
1.2684824 32.5 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
840.26849 724.5 m
1019.5 724.5 l
1019.5 752.93219 l
840.26849 752.93219 l
h
840.26849 724.5 m
S
0 i
1 1 1 sc
CM
11.102789 27.992462 m
24.283285 27.992462 l
25.387854 27.992462 26.283285 27.097033 26.283285 25.992462 c
26.283285 10.575377 l
26.283285 9.4708071 25.387854 8.5753765 24.283285 8.5753765 c
11.102789 8.5753765 l
9.9982195 8.5753765 9.1027889 9.4708071 9.1027889 10.575377 c
9.1027889 25.992462 l
9.1027889 27.097033 9.9982195 27.992462 11.102789 27.992462 c
h
11.102789 27.992462 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
850.10278 729.00751 m
863.28326 729.00751 l
864.38788 729.00751 865.28326 729.90295 865.28326 731.00751 c
865.28326 746.42462 l
865.28326 747.52917 864.38788 748.42462 863.28326 748.42462 c
850.10278 748.42462 l
848.99823 748.42462 848.10278 747.52917 848.10278 746.42462 c
848.10278 731.00751 l
848.10278 729.90295 848.99823 729.00751 850.10278 729.00751 c
h
850.10278 729.00751 m
S
0 i
1 1 1 sc
CM
39.450607 27.992462 m
52.631104 27.992462 l
53.735672 27.992462 54.631104 27.097033 54.631104 25.992462 c
54.631104 10.575377 l
54.631104 9.4708071 53.735672 8.5753765 52.631104 8.5753765 c
39.450607 8.5753765 l
38.346039 8.5753765 37.450607 9.4708071 37.450607 10.575377 c
37.450607 25.992462 l
37.450607 27.097033 38.346039 27.992462 39.450607 27.992462 c
h
39.450607 27.992462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
878.45062 729.00751 m
891.6311 729.00751 l
892.73566 729.00751 893.6311 729.90295 893.6311 731.00751 c
893.6311 746.42462 l
893.6311 747.52917 892.73566 748.42462 891.6311 748.42462 c
878.45062 748.42462 l
877.34601 748.42462 876.45062 747.52917 876.45062 746.42462 c
876.45062 731.00751 l
876.45062 729.90295 877.34601 729.00751 878.45062 729.00751 c
h
878.45062 729.00751 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
67.798424 27.992462 m
80.97892 27.992462 l
82.083488 27.992462 82.97892 27.097033 82.97892 25.992462 c
82.97892 10.575377 l
82.97892 9.4708071 82.083488 8.5753765 80.97892 8.5753765 c
67.798424 8.5753765 l
66.693855 8.5753765 65.798424 9.4708071 65.798424 10.575377 c
65.798424 25.992462 l
65.798424 27.097033 66.693855 27.992462 67.798424 27.992462 c
h
67.798424 27.992462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
906.7984 729.00751 m
919.97894 729.00751 l
921.0835 729.00751 921.97894 729.90295 921.97894 731.00751 c
921.97894 746.42462 l
921.97894 747.52917 921.0835 748.42462 919.97894 748.42462 c
906.7984 748.42462 l
905.69385 748.42462 904.7984 747.52917 904.7984 746.42462 c
904.7984 731.00751 l
904.7984 729.90295 905.69385 729.00751 906.7984 729.00751 c
h
906.7984 729.00751 m
S
0 i
1 1 1 sc
CM
96.146248 27.992462 m
109.32674 27.992462 l
110.43131 27.992462 111.32674 27.097033 111.32674 25.992462 c
111.32674 10.575377 l
111.32674 9.4708071 110.43131 8.5753765 109.32674 8.5753765 c
96.146248 8.5753765 l
95.041672 8.5753765 94.146248 9.4708071 94.146248 10.575377 c
94.146248 25.992462 l
94.146248 27.097033 95.041672 27.992462 96.146248 27.992462 c
h
96.146248 27.992462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
935.14624 729.00751 m
948.32672 729.00751 l
949.43134 729.00751 950.32672 729.90295 950.32672 731.00751 c
950.32672 746.42462 l
950.32672 747.52917 949.43134 748.42462 948.32672 748.42462 c
935.14624 748.42462 l
934.04169 748.42462 933.14624 747.52917 933.14624 746.42462 c
933.14624 731.00751 l
933.14624 729.90295 934.04169 729.00751 935.14624 729.00751 c
h
935.14624 729.00751 m
S
0 i
1 1 1 sc
CM
124.49406 27.992462 m
137.67456 27.992462 l
138.77913 27.992462 139.67456 27.097033 139.67456 25.992462 c
139.67456 10.575377 l
139.67456 9.4708071 138.77913 8.5753765 137.67456 8.5753765 c
124.49406 8.5753765 l
123.3895 8.5753765 122.49406 9.4708071 122.49406 10.575377 c
122.49406 25.992462 l
122.49406 27.097033 123.3895 27.992462 124.49406 27.992462 c
h
124.49406 27.992462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
963.49408 729.00751 m
976.67456 729.00751 l
977.77911 729.00751 978.67456 729.90295 978.67456 731.00751 c
978.67456 746.42462 l
978.67456 747.52917 977.77911 748.42462 976.67456 748.42462 c
963.49408 748.42462 l
962.38947 748.42462 961.49408 747.52917 961.49408 746.42462 c
961.49408 731.00751 l
961.49408 729.90295 962.38947 729.00751 963.49408 729.00751 c
h
963.49408 729.00751 m
S
0 i
1 1 1 sc
CM
153.12822 27.992462 m
166.30872 27.992462 l
167.41328 27.992462 168.30872 27.097033 168.30872 25.992462 c
168.30872 10.575377 l
168.30872 9.4708071 167.41328 8.5753765 166.30872 8.5753765 c
153.12822 8.5753765 l
152.02365 8.5753765 151.12822 9.4708071 151.12822 10.575377 c
151.12822 25.992462 l
151.12822 27.097033 152.02365 27.992462 153.12822 27.992462 c
h
153.12822 27.992462 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
992.12823 729.00751 m
1005.3087 729.00751 l
1006.4133 729.00751 1007.3087 729.90295 1007.3087 731.00751 c
1007.3087 746.42462 l
1007.3087 747.52917 1006.4133 748.42462 1005.3087 748.42462 c
992.12823 748.42462 l
991.02368 748.42462 990.12823 747.52917 990.12823 746.42462 c
990.12823 731.00751 l
990.12823 729.90295 991.02368 729.00751 992.12823 729.00751 c
h
992.12823 729.00751 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
1031.0439 735.38007 m
(!"#$%&'\(\)*"$&+,")[ 7.776000 6.444000 10.236000 6.444000 6.672000 3.780000 2.664000 6.444000 3.336000 3.552000 6.444000 6.444000 3.780000 6.672000 3.780000 0.000000 ] xS
1048.714 749.71606 m
(\)-".+"%\(")[ 3.336000 6.000000 6.444000 7.116000 6.672000 6.444000 6.672000 6.444000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
1.2684824 221.60034 m
180.5 221.60034 l
180.5 193.16818 l
1.2684824 193.16818 l
h
1.2684824 221.60034 m
f
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
840.26849 535.39966 m
1019.5 535.39966 l
1019.5 563.83179 l
840.26849 563.83179 l
h
840.26849 535.39966 m
S
0 i
1 1 1 sc
CM
11.102789 217.0928 m
24.283285 217.0928 l
25.387854 217.0928 26.283285 216.19739 26.283285 215.0928 c
26.283285 199.67572 l
26.283285 198.57115 25.387854 197.67572 24.283285 197.67572 c
11.102789 197.67572 l
9.9982195 197.67572 9.1027889 198.57115 9.1027889 199.67572 c
9.1027889 215.0928 l
9.1027889 216.19739 9.9982195 217.0928 11.102789 217.0928 c
h
11.102789 217.0928 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
850.10278 539.90717 m
863.28326 539.90717 l
864.38788 539.90717 865.28326 540.80261 865.28326 541.90717 c
865.28326 557.32428 l
865.28326 558.42883 864.38788 559.32428 863.28326 559.32428 c
850.10278 559.32428 l
848.99823 559.32428 848.10278 558.42883 848.10278 557.32428 c
848.10278 541.90717 l
848.10278 540.80261 848.99823 539.90717 850.10278 539.90717 c
h
850.10278 539.90717 m
S
0 i
1 1 1 sc
CM
39.450607 217.0928 m
52.631104 217.0928 l
53.735672 217.0928 54.631104 216.19739 54.631104 215.0928 c
54.631104 199.67572 l
54.631104 198.57115 53.735672 197.67572 52.631104 197.67572 c
39.450607 197.67572 l
38.346039 197.67572 37.450607 198.57115 37.450607 199.67572 c
37.450607 215.0928 l
37.450607 216.19739 38.346039 217.0928 39.450607 217.0928 c
h
39.450607 217.0928 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
878.45062 539.90717 m
891.6311 539.90717 l
892.73566 539.90717 893.6311 540.80261 893.6311 541.90717 c
893.6311 557.32428 l
893.6311 558.42883 892.73566 559.32428 891.6311 559.32428 c
878.45062 559.32428 l
877.34601 559.32428 876.45062 558.42883 876.45062 557.32428 c
876.45062 541.90717 l
876.45062 540.80261 877.34601 539.90717 878.45062 539.90717 c
h
878.45062 539.90717 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
67.798424 217.0928 m
80.97892 217.0928 l
82.083488 217.0928 82.97892 216.19739 82.97892 215.0928 c
82.97892 199.67572 l
82.97892 198.57115 82.083488 197.67572 80.97892 197.67572 c
67.798424 197.67572 l
66.693855 197.67572 65.798424 198.57115 65.798424 199.67572 c
65.798424 215.0928 l
65.798424 216.19739 66.693855 217.0928 67.798424 217.0928 c
h
67.798424 217.0928 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
906.7984 539.90717 m
919.97894 539.90717 l
921.0835 539.90717 921.97894 540.80261 921.97894 541.90717 c
921.97894 557.32428 l
921.97894 558.42883 921.0835 559.32428 919.97894 559.32428 c
906.7984 559.32428 l
905.69385 559.32428 904.7984 558.42883 904.7984 557.32428 c
904.7984 541.90717 l
904.7984 540.80261 905.69385 539.90717 906.7984 539.90717 c
h
906.7984 539.90717 m
S
0 i
1 1 1 sc
CM
96.146248 217.0928 m
109.32674 217.0928 l
110.43131 217.0928 111.32674 216.19739 111.32674 215.0928 c
111.32674 199.67572 l
111.32674 198.57115 110.43131 197.67572 109.32674 197.67572 c
96.146248 197.67572 l
95.041672 197.67572 94.146248 198.57115 94.146248 199.67572 c
94.146248 215.0928 l
94.146248 216.19739 95.041672 217.0928 96.146248 217.0928 c
h
96.146248 217.0928 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
935.14624 539.90717 m
948.32672 539.90717 l
949.43134 539.90717 950.32672 540.80261 950.32672 541.90717 c
950.32672 557.32428 l
950.32672 558.42883 949.43134 559.32428 948.32672 559.32428 c
935.14624 559.32428 l
934.04169 559.32428 933.14624 558.42883 933.14624 557.32428 c
933.14624 541.90717 l
933.14624 540.80261 934.04169 539.90717 935.14624 539.90717 c
h
935.14624 539.90717 m
S
0 i
1 1 1 sc
CM
124.49406 217.0928 m
137.67456 217.0928 l
138.77913 217.0928 139.67456 216.19739 139.67456 215.0928 c
139.67456 199.67572 l
139.67456 198.57115 138.77913 197.67572 137.67456 197.67572 c
124.49406 197.67572 l
123.3895 197.67572 122.49406 198.57115 122.49406 199.67572 c
122.49406 215.0928 l
122.49406 216.19739 123.3895 217.0928 124.49406 217.0928 c
h
124.49406 217.0928 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
963.49408 539.90717 m
976.67456 539.90717 l
977.77911 539.90717 978.67456 540.80261 978.67456 541.90717 c
978.67456 557.32428 l
978.67456 558.42883 977.77911 559.32428 976.67456 559.32428 c
963.49408 559.32428 l
962.38947 559.32428 961.49408 558.42883 961.49408 557.32428 c
961.49408 541.90717 l
961.49408 540.80261 962.38947 539.90717 963.49408 539.90717 c
h
963.49408 539.90717 m
S
0 i
1 1 1 sc
CM
153.12822 217.0928 m
166.30872 217.0928 l
167.41328 217.0928 168.30872 216.19739 168.30872 215.0928 c
168.30872 199.67572 l
168.30872 198.57115 167.41328 197.67572 166.30872 197.67572 c
153.12822 197.67572 l
152.02365 197.67572 151.12822 198.57115 151.12822 199.67572 c
151.12822 215.0928 l
151.12822 216.19739 152.02365 217.0928 153.12822 217.0928 c
h
153.12822 217.0928 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
992.12823 539.90717 m
1005.3087 539.90717 l
1006.4133 539.90717 1007.3087 540.80261 1007.3087 541.90717 c
1007.3087 557.32428 l
1007.3087 558.42883 1006.4133 559.32428 1005.3087 559.32428 c
992.12823 559.32428 l
991.02368 559.32428 990.12823 558.42883 990.12823 557.32428 c
990.12823 541.90717 l
990.12823 540.80261 991.02368 539.90717 992.12823 539.90717 c
h
992.12823 539.90717 m
S
0 i
1 1 1 sc
CM
40.305309 276.04083 m
107.08133 276.04083 l
108.1859 276.04083 109.08133 275.14542 109.08133 274.04083 c
109.08133 254.04083 l
109.08133 252.93626 108.1859 252.04083 107.08133 252.04083 c
40.305309 252.04083 l
39.200737 252.04083 38.305309 252.93626 38.305309 254.04083 c
38.305309 274.04083 l
38.305309 275.14542 39.200737 276.04083 40.305309 276.04083 c
h
40.305309 276.04083 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
879.3053 480.95917 m
946.0813 480.95917 l
947.18591 480.95917 948.0813 481.85458 948.0813 482.95917 c
948.0813 502.95917 l
948.0813 504.06372 947.18591 504.95917 946.0813 504.95917 c
879.3053 504.95917 l
878.20074 504.95917 877.3053 504.06372 877.3053 502.95917 c
877.3053 482.95917 l
877.3053 481.85458 878.20074 480.95917 879.3053 480.95917 c
h
879.3053 480.95917 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
890.0213 497.95917 m
(/"%-")[ 11.264000 8.592000 8.896000 8.000000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
913.26953 539.90717 m
912.9621 514.8584 l
S
0 i
CM
73.863914 250.14098 m
70.962318 242.10477 l
76.961868 242.17839 l
h
73.863914 250.14098 m
f
0 J
0 j
1 0 0 -1 -839 757 cm
912.86389 506.85901 m
909.96234 514.89526 l
915.96185 514.82159 l
h
912.86389 506.85901 m
S
1 1 1 sc
CM
38.145962 330.93591 m
108.92198 330.93591 l
108.92198 306.48132 l
38.145962 306.48132 l
h
38.145962 330.93591 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
877.14594 426.06409 m
947.922 426.06409 l
947.922 450.51868 l
877.14594 450.51868 l
h
877.14594 426.06409 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
894.86395 441.79138 m
(0$1"2-)[ 6.672000 6.444000 7.116000 6.444000 2.664000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
912.65833 480.95917 m
912.59845 460.41864 l
S
0 i
CM
73.57515 304.58133 m
70.59848 296.57263 l
76.598457 296.59012 l
h
73.57515 304.58133 m
f
0 J
0 j
1 0 0 -1 -839 757 cm
912.57513 452.41867 m
909.59851 460.42737 l
915.59845 460.40988 l
h
912.57513 452.41867 m
S
/Cs1 SC
0 sc
1057.042 546.27972 m
(3+&4+&\)5*\))[ 9.120000 6.672000 3.780000 7.116000 6.672000 3.780000 3.336000 6.888000 3.552000 0.000000 ] xS
1032.16 560.61572 m
(&,$%-*5,#",\)125\(6-)[ 3.780000 3.996000 6.444000 6.672000 6.000000 3.552000 6.888000 3.996000 10.236000 6.444000 3.996000 3.336000 7.116000 2.664000 6.888000 6.444000 6.228000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
4.2684822 165.17078 m
179.5 165.17078 l
180.60457 165.17078 181.5 164.27534 181.5 163.17078 c
181.5 132.49741 l
181.5 131.39284 180.60457 130.49741 179.5 130.49741 c
4.2684822 130.49741 l
3.163913 130.49741 2.2684824 131.39284 2.2684824 132.49741 c
2.2684824 163.17078 l
2.2684824 164.27534 3.163913 165.17078 4.2684822 165.17078 c
h
4.2684822 165.17078 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
843.26849 591.82922 m
1018.5 591.82922 l
1019.6046 591.82922 1020.5 592.72467 1020.5 593.82922 c
1020.5 624.50256 l
1020.5 625.60718 1019.6046 626.50256 1018.5 626.50256 c
843.26849 626.50256 l
842.16394 626.50256 841.26849 625.60718 841.26849 624.50256 c
841.26849 593.82922 l
841.26849 592.72467 842.16394 591.82922 843.26849 591.82922 c
h
843.26849 591.82922 m
S
/Cs3 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
865.69226 614.16589 m
(7,$%-*5,#",\)825\(6)[ 7.712000 5.328000 8.592000 8.896000 8.000000 4.736000 9.184000 5.328000 13.648000 8.592000 5.328000 4.448000 10.960000 3.552000 9.184000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
4.2684822 98.835388 m
179.5 98.835388 l
180.60457 98.835388 181.5 97.939957 181.5 96.835388 c
181.5 66.162025 l
181.5 65.057449 180.60457 64.162025 179.5 64.162025 c
4.2684822 64.162025 l
3.163913 64.162025 2.2684824 65.057449 2.2684824 66.162025 c
2.2684824 96.835388 l
2.2684824 97.939957 3.163913 98.835388 4.2684822 98.835388 c
h
4.2684822 98.835388 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -839 757 cm
843.26849 658.16461 m
1018.5 658.16461 l
1019.6046 658.16461 1020.5 659.06006 1020.5 660.16461 c
1020.5 690.83795 l
1020.5 691.94257 1019.6046 692.83795 1018.5 692.83795 c
843.26849 692.83795 l
842.16394 692.83795 841.26849 691.94257 841.26849 690.83795 c
841.26849 660.16461 l
841.26849 659.06006 842.16394 658.16461 843.26849 658.16461 c
h
843.26849 658.16461 m
S
/Cs3 SC
0 sc
0 i
865.69226 680.50128 m
(7,$%-*5,#",\)825\(6)[ 7.712000 5.328000 8.592000 8.896000 8.000000 4.736000 9.184000 5.328000 13.648000 8.592000 5.328000 4.448000 10.960000 3.552000 9.184000 8.592000 0.000000 ] xS
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
930.10913 724.5 m
930.40594 705.73639 l
S
0 i
CM
91.557793 60.862434 m
87.806404 51.320576 l
95.005501 51.206696 l
h
91.557793 60.862434 m
f
0 J
0 j
1 0 0 -1 -839 757 cm
930.5578 696.13757 m
926.8064 705.67944 l
934.00549 705.79333 l
h
930.5578 696.13757 m
S
1 J
1 j
0.60000002 i
930.88422 658.16461 m
930.88422 639.40259 l
S
0 i
CM
91.884239 127.19741 m
88.284241 117.59741 l
95.484238 117.59741 l
h
91.884239 127.19741 m
f
0 J
0 j
1 0 0 -1 -839 757 cm
930.88422 629.80261 m
927.28424 639.40259 l
934.48425 639.40259 l
h
930.88422 629.80261 m
S
1 J
1 j
0.60000002 i
930.59314 591.82922 m
930.33954 576.72998 l
S
0 i
CM
91.178375 189.86865 m
87.740067 180.20956 l
94.939049 180.33044 l
h
91.178375 189.86865 m
f
0 J
0 j
1 0 0 -1 -839 757 cm
930.17834 567.13135 m
926.74005 576.79047 l
933.93903 576.66956 l
h
930.17834 567.13135 m
S
ep
end
%%Trailer
%%EOF
