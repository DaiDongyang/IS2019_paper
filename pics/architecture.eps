%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 288.000000 333.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 288 333
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 288 333
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /m put
dup 36 /a put
dup 37 /n put
dup 38 /t put
dup 39 /i put
dup 40 /c put
dup 41 /space put
dup 42 /f put
dup 43 /u put
dup 44 /r put
dup 45 /s put
dup 46 /q put
dup 47 /N put
dup 48 /b put
dup 49 /d put
dup 50 /l put
dup 51 /fi put
dup 52 /C put
dup 53 /h put
dup 54 /P put
dup 55 /B put
dup 56 /E put
dup 57 /R put
dup 58 /T put
dup 59 /L put
dup 60 /o put
dup 61 /p put
dup 62 /y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/C 3 def
/E 4 def
/L 5 def
/N 6 def
/P 7 def
/R 8 def
/S 9 def
/T 10 def
/a 11 def
/b 12 def
/c 13 def
/d 14 def
/e 15 def
/f 16 def
/h 17 def
/i 18 def
/l 19 def
/m 20 def
/n 21 def
/o 22 def
/p 23 def
/q 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
/y 29 def
/fi 30 def
/uni2B91 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C1729802DA479E44F824526137EEB725F9A8277E11FB440D7432A2FB2F8DA2BCCD532B90735191BAC4AF35F550E035C4C8C1BAC2797ED4C005EE32CFA64F85F936DA558E85ADDE29C5BBD37B22C71351C5E00879325FA26150129287326D470FBBC3F779B4DB962DE92F2789777FB9D6D99F5984DED6F58E40D39A994F8D1C66037A2901A0F6CDEE51BBDB75A2D205C5E2D2F189FA0DC5566094658DAC7F52850C3D0E845966832380DE4854D6104EB42151321E0CC3BB63E083FAF261B601482ED505FC119BB91772A92612F57A1560E64B0599A08994BCF93F4C292EFC56C8267AB2AD5A63A0A40472DB1AD0E31BA1E42594092BF73ADEE29C285B97618201D0322BCEEEA487096F143E34C0B19DD165853FFE430E51646B97D182A116FCD6B5F976CD0105ACF66EF78A5BF6F29BF1385EE81BAFA914DA1BDFA56E5FCDDF4B6FA5CEC3DC0CA013E62A632FF111C80BA46CE61D287FDC859740AAA5A1DEAD9655C6CB61BD22FDB912829976B0082A8759C1EA4EF41B164741B433749FA817337908B464620CEEAB8375A55A54163EEE2AAFCAC80079BC61288EC855F8C9832CB68C5703DE8E04D9C6A57EC56D89BFBEBA70FD08A5376761125C526DD7FCF4DF2B82B9EC1A44101F0F536BE26AFCDC334F5946BA4E7E559490F2B71919F73288308F8F6DB418390DFFFECAF61DE2EBA26DFF365C5E75C0BF6984BD8AC975B038E075D3692BB7B
8523A919051CCDA1DE7F891E5EE0721E2006B7FC4884364F2DA33E234F6547A9ED37474BE8A196C47E67DE6958BB826F4EBD50B7161D57ACAEF630119379CF05030F111BFCFE66217013F7B8D1C49D09DBFBB1180C209EF1198658DD79ABA5FA8A32AFB853720EB168863A4FD8C365A46D2258C880ED834254933978B88FEA1D1C27B293F487B2FCE70979C4011690CF7ACCB1A93ABE6DE3B15BFBA6FC24FC9AB73C440EFF5725A8ED37D22ACB67B63B4B7C41E97B7254AF35845C2C5253154BDFDAECA1C239F01DA4478E39D880AC9252DCD680BCC7D750EB8D228A45956DB32ED1A481397DD502A1353B94254F23B88888DDF885F3362CA21B287ACDF045490F5E3FD4F640034E42D3B69962E45F989AAAEDCBF4F5686B22853748A10AFAA9A5C05ECAC9E20F8F58B78F36E28A48FA040046E22E7CF2E07A4AE727BBF547111E4BD9DC5AD8A01C79E80A2AB3B9FAF76F973E4981F0B9AF9274536EA377AB8B06F967F122EE04F1F29BC79EBC4E897218F1998ED62B86A1DE5FB444556EC68FB187550CA8BE16396E3232C12A7EDFF12B74BDECF213E3DAF2AF45D3EFD69264712A5057067B0AE0E7A16265BBC1E7950F8DE09702D97426B82ECEE30F7A6FADFDD0DB8D574C7CA62521C6C0A4CBAFBC1B25D392930DBD5A918C5C910C81D360CFE3A01BCCE319E8E37E07E07F75BE69DF94E357D8A0179DE307DCA17AACC1E4DFB42DDBFE6375A60566B0BA557FB7F345CADF64EC6906D93165E34F24CC1B7EC547C07DC2A45781E939C4D084526F5AC2902939C5461033DB9BBB3503D0A69CA883C4A31A16BA74B56CF1784EA7BC23EDB1A5158AC76B4D2238F7D804EF13EAD10DCEF7AC0B6F352C58AAEAC1E533AB085E3DFE750DA9761A9FC0F64EA1D638C8EB361F23F992D085A5987B38CD11C39CBF94D7FC6493631755300D76316EE8100C3699A242B95B7F8DDA155A7F4E69505018DB03A04A3DD02C51FA8242480DEC7F7B509D968436938B0A5194200F74B74AAD5240F39B2F033B07207DBB1DF161833EFD78602A8623891ADEA91163FF9F282392A9EB27C0DFF05FE8BA21C7C593617350367EAC33720B5F1B69A1F3FE42A8CE8F1901E0554F56609213E8AB99EB52D4444AA317587134B4E0859E923547246D6F9634E9B321ABE630094C71B7F61C52C9246DC3F743DBE36DEA8CF053C4B43A39D01266E40EEA1F2C9950E7A8A4C7BEA38D0E286DF117408CAE0262532564202A0902B1021E727EBDBC20CF7A17DFD1AE8636673A6B6EECCAE3909A7E5537F284293E7BD9C0F0E20F97EE6637C91707D09A3BCAF8F2EECDA059CD8BD57F482C720ADBAAC9DB7F135082FCD8536E819C1D89F3BA2B8329D021D6E862BD65803FC8F7BFE9BB6AA52EF529C5A8700EB3FF7BA113722FFCC3EF1B8721D123C83A5B8C65E174BB3C41FBAB78E51430

B771E8DC63B615D9AB3F216AC78777F7A91BBB305FCACB513BFD41CB919E729C7C90AAE40CE9405611338787E933095F3BCE02CF7AA1576B00AEB51D3EF1DD9B873A19584EB7BDA91EF410A54580B2EB8300F5C5A4C4365FF0F5860A3FC9EE91D81C9C725689B72CB812ECC35E210AB2C5CC168292D6E302C9D0230FC651FC44A91623820945803AD1E59000AB0CD7875FC6D112DE42BBAFAB82F2BF3185015145ED15211A8D7841D43E70698C7D7F5A596BBBED12EA1C4DAFB5E3EDFF86E9C83BF5F2116EA369C552D2CC06FF53A056B6899535EC1AB1E61538625FB9052A9262122F1A1F00E00BE7119A458CF6AD181C9BFF215C1F8760F20D8BC620965E2984D5975FD27F5D46859858F45BB5D62DAF7A0B351C443E2546459C4DD1AC391AFA45A8F2E2C4A68EE7330629DAE0F29FEADF424E4964E8640F273BA38D0CCC8C194DEA59F55544ADC054ECF1F72E8380FABFE7ACF943BEC67B28A36978174B90F035AB251891A7ABFD0294773C769A8EDBD492E98C8B356C9FCD8DC7EE8C2E1F64261B196039D351948AAD17567C50076D274A17B3FE9E6527BFEE18C6785C2068585F1E772CDA9C7D667BE9C1D62BE7EEC02BF409DE3059A604EFEA27E00C8C8B370645D49921F13D12DF02F5B49D771290F7E7ACD4F69BD126B54A9A1759AB08D1362CA75A2BCC1B2D2AD2AF887E8E3DC1745A5AB5D64DCB939976DDBD8A2DD4C1EF547C56274DF207E15C52C4D409A0B1DE514CFD5F78AE39E7762D285882A9793E38AD0949FD11BA6BF3245F838CE2C1443581041CC1217D399FC78AF99A54A5C611A542563563BB7D40DE8D83035CE42DCA01B4B3AEC92E77419DB9374C827FE2B25FA62E87955CC7B1A5BA18B70AE57436AB0B606F1A17F1C2C1A7B57BC4D75F3326B5C8C2C1800145FAE8364537DBD01C06A301AE5A60345DFAC5A59D91D1093BC6B465A484F285CB54B6C31A843B4E1844294C0C66D822B12D12A60A4D5AADC4088100F1688F2D630B1B812899780C9B79AF8BF27A4FF6068BACA6F81666E09D396BCA4CF1080E91481CC68445F3BCE97F7D456199376266AC4871DBB655F1E26851A1DA6D5337F5B0680B20403AB846CC7E261631B53EA3C8198B6679E0E28991B2C604128B1127C3068A617FC02A7BDE8813468085D35D8E5C80550F2F1A5B54F31BD4A0C29A3C2D6C4C9AD726C951F515E01227B8133671EA810C6F51A7FD2B9322272AEC208DDB3235A9E089C42C108F0FB870A5008CC79D779701C3C4EE2500C5E7279C3F786BEECCF045728FD3D53430DBF3D4CDF61AF3DB42646CB9708515EE7357DE36CBFA5BC1498F5E75D7EC257964094998BB88287B63170525897F675CD7DED25DD77D7F5C3CE2BD76914A7177A42009CD5839910BA2B450FC6880DACA4239C2B8DC59DFE5D7B2D2494990C39BEF8FFB5557F05C13BC

C46482D683967F1B764EBD13488FED12DBF1A81966D01E027B8EA3B28AF803891705CC6D57A377E96B28A6479B4AB675DDD9AFBA00335ABB75B2D94860956C33641B6800A06D98CEE281768CDB5FFFA6013BA4EB48001AF198924A68860EED3E7033C29640B9BA3FEBA5E279B43B5C955D252D9C94330426EFD78F77C4EC10D61676822701DA99F5F1A13235C6AFBE1804BC1859564E75B46A7908A785B7F23EE25B0589ECB251ABD11270391C045332DB7AE3B4660AFAC725794CB232D946933998BF8BC787B466F64C3A1AA86589A71EEE11F761F04365A6CB3D2086BAB65073CFFAE5E70CE773C870044A48B2A6032A6AF6C6D91D55E857248216FDC3AD5B09AE48904B14A4E9B2F6A1A2DAF35D38FD531B1EB19F78EF7CC783D6AC7EC0E3C48EBFA0B28F7081D8813772667101322C58D9AA0C540B426C34E07147BB7C43D0D90BF3655DBC163BE62194A490B4ED81CF8F50CEEA7A1894DDC890602F59DB656D42C75C797201E4D747876A09F49A528A880C4C4988D1D5C85ACAB949D7FCAD8F5E0D507149BB29D6C4AED9F7DF52B2BEE3FC6394C776A60AD9D5FEDECA141715C6FF52C441DE7A606B8E48EC666B6874ED56160685E375606A028D8DA95E54BEDCDA60B1395E867F6B8C33E93234AEBB5509DAD8F43571ED4E31A56FBC273E798479ADFC7533FEDEDCA44DD3B8DC117D6613854D119EFE28FE17909C4AB2060D09FFEE1E545760AEE24C046914B5FF668EA93A4CEDD304C1A709F1A494A3B17EEEFA90486B1600B6AB6DBB0E4603601CCBEBC6E77DFACBA83A4F3D924CC8ABFE728953028F2C8E5B7A98106B6B253A806279745A413DD8C5F516AD30D46CD4C0A49072B019C5CA73518C183DD73B90DD898E5598755DC1E7F8F23A7E4490214C71CAAA729E320E12F13D9340B50DC0B8E0AB34E7E16CC662821190320739858C34A5675BF8708D1CB3D7424E9F0B1AEFCC490D1AB8A918FDD0F2691A9F0DCA426DFEF353B0FBBA9BC89FCC378736FBBA60008A1861C57E019A57F53BA35C69A8F7C9F722F8F88B4ADDA3747125D4771C21FC892A77DF4F43A9AF48B79224EC477B2812AF450189F43459FBE7899D106FEDBB961E72E774
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 288 333 rc
0 333 m
288 333 l
288 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-894 1141 m
1772 1141 l
1772 -1234 l
-894 -1234 l
h
-894 1141 m
f
0.5 180.55276 m
179.73152 180.55276 l
179.73152 152.12061 l
0.5 152.12061 l
h
0.5 180.55276 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
104.5 293.44724 m
283.73151 293.44724 l
283.73151 321.87939 l
104.5 321.87939 l
h
104.5 293.44724 m
S
0 i
1 1 1 sc
CM
10.334307 176.04523 m
23.514803 176.04523 l
24.619371 176.04523 25.514803 175.1498 25.514803 174.04523 c
25.514803 158.62814 l
25.514803 157.52357 24.619371 156.62814 23.514803 156.62814 c
10.334307 156.62814 l
9.2297363 156.62814 8.3343067 157.52357 8.3343067 158.62814 c
8.3343067 174.04523 l
8.3343067 175.1498 9.2297363 176.04523 10.334307 176.04523 c
h
10.334307 176.04523 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
114.3343 297.95477 m
127.5148 297.95477 l
128.61937 297.95477 129.5148 298.85019 129.5148 299.95477 c
129.5148 315.37186 l
129.5148 316.47644 128.61937 317.37186 127.5148 317.37186 c
114.3343 317.37186 l
113.22974 317.37186 112.3343 316.47644 112.3343 315.37186 c
112.3343 299.95477 l
112.3343 298.85019 113.22974 297.95477 114.3343 297.95477 c
h
114.3343 297.95477 m
S
0 i
1 1 1 sc
CM
38.682125 176.04523 m
51.862621 176.04523 l
52.96719 176.04523 53.862621 175.1498 53.862621 174.04523 c
53.862621 158.62814 l
53.862621 157.52357 52.96719 156.62814 51.862621 156.62814 c
38.682125 156.62814 l
37.577557 156.62814 36.682125 157.52357 36.682125 158.62814 c
36.682125 174.04523 l
36.682125 175.1498 37.577557 176.04523 38.682125 176.04523 c
h
38.682125 176.04523 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
142.68213 297.95477 m
155.86263 297.95477 l
156.96719 297.95477 157.86263 298.85019 157.86263 299.95477 c
157.86263 315.37186 l
157.86263 316.47644 156.96719 317.37186 155.86263 317.37186 c
142.68213 317.37186 l
141.57756 317.37186 140.68213 316.47644 140.68213 315.37186 c
140.68213 299.95477 l
140.68213 298.85019 141.57756 297.95477 142.68213 297.95477 c
h
142.68213 297.95477 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
67.029945 176.04523 m
80.210442 176.04523 l
81.31501 176.04523 82.210442 175.1498 82.210442 174.04523 c
82.210442 158.62814 l
82.210442 157.52357 81.31501 156.62814 80.210442 156.62814 c
67.029945 156.62814 l
65.925377 156.62814 65.029945 157.52357 65.029945 158.62814 c
65.029945 174.04523 l
65.029945 175.1498 65.925377 176.04523 67.029945 176.04523 c
h
67.029945 176.04523 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
171.02994 297.95477 m
184.21043 297.95477 l
185.315 297.95477 186.21043 298.85019 186.21043 299.95477 c
186.21043 315.37186 l
186.21043 316.47644 185.315 317.37186 184.21043 317.37186 c
171.02994 317.37186 l
169.92537 317.37186 169.02994 316.47644 169.02994 315.37186 c
169.02994 299.95477 l
169.02994 298.85019 169.92537 297.95477 171.02994 297.95477 c
h
171.02994 297.95477 m
S
0 i
1 1 1 sc
CM
95.377762 176.04523 m
108.55826 176.04523 l
109.66283 176.04523 110.55826 175.1498 110.55826 174.04523 c
110.55826 158.62814 l
110.55826 157.52357 109.66283 156.62814 108.55826 156.62814 c
95.377762 156.62814 l
94.273193 156.62814 93.377762 157.52357 93.377762 158.62814 c
93.377762 174.04523 l
93.377762 175.1498 94.273193 176.04523 95.377762 176.04523 c
h
95.377762 176.04523 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
199.37776 297.95477 m
212.55826 297.95477 l
213.66283 297.95477 214.55826 298.85019 214.55826 299.95477 c
214.55826 315.37186 l
214.55826 316.47644 213.66283 317.37186 212.55826 317.37186 c
199.37776 317.37186 l
198.27319 317.37186 197.37776 316.47644 197.37776 315.37186 c
197.37776 299.95477 l
197.37776 298.85019 198.27319 297.95477 199.37776 297.95477 c
h
199.37776 297.95477 m
S
0 i
1 1 1 sc
CM
123.72558 176.04523 m
136.90608 176.04523 l
138.01065 176.04523 138.90608 175.1498 138.90608 174.04523 c
138.90608 158.62814 l
138.90608 157.52357 138.01065 156.62814 136.90608 156.62814 c
123.72558 156.62814 l
122.62101 156.62814 121.72558 157.52357 121.72558 158.62814 c
121.72558 174.04523 l
121.72558 175.1498 122.62101 176.04523 123.72558 176.04523 c
h
123.72558 176.04523 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
227.72559 297.95477 m
240.90608 297.95477 l
242.01065 297.95477 242.90608 298.85019 242.90608 299.95477 c
242.90608 315.37186 l
242.90608 316.47644 242.01065 317.37186 240.90608 317.37186 c
227.72559 317.37186 l
226.62102 317.37186 225.72559 316.47644 225.72559 315.37186 c
225.72559 299.95477 l
225.72559 298.85019 226.62102 297.95477 227.72559 297.95477 c
h
227.72559 297.95477 m
S
0 i
1 1 1 sc
CM
152.35974 176.04523 m
165.54024 176.04523 l
166.64481 176.04523 167.54024 175.1498 167.54024 174.04523 c
167.54024 158.62814 l
167.54024 157.52357 166.64481 156.62814 165.54024 156.62814 c
152.35974 156.62814 l
151.25517 156.62814 150.35974 157.52357 150.35974 158.62814 c
150.35974 174.04523 l
150.35974 175.1498 151.25517 176.04523 152.35974 176.04523 c
h
152.35974 176.04523 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
256.35974 297.95477 m
269.54025 297.95477 l
270.64481 297.95477 271.54025 298.85019 271.54025 299.95477 c
271.54025 315.37186 l
271.54025 316.47644 270.64481 317.37186 269.54025 317.37186 c
256.35974 317.37186 l
255.25517 317.37186 254.35974 316.47644 254.35974 315.37186 c
254.35974 299.95477 l
254.35974 298.85019 255.25517 297.95477 256.35974 297.95477 c
h
256.35974 297.95477 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
295.27551 304.32733 m
(!"#$%&'\(\)*"$&+,")[ 7.776000 6.444000 10.236000 6.444000 6.672000 3.780000 2.664000 6.444000 3.336000 3.552000 6.444000 6.444000 3.780000 6.672000 3.780000 0.000000 ] xS
312.94553 318.66333 m
(\)-".+"%\(")[ 3.336000 6.000000 6.444000 7.116000 6.672000 6.444000 6.672000 6.444000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
7.8657589 257.42337 m
174.36575 257.42337 l
176.02261 257.42337 177.36575 256.08023 177.36575 254.42337 c
177.36575 225.75 l
177.36575 224.09314 176.02261 222.75 174.36575 222.75 c
7.8657589 222.75 l
6.2089047 222.75 4.8657589 224.09314 4.8657589 225.75 c
4.8657589 254.42337 l
4.8657589 256.08023 6.2089047 257.42337 7.8657589 257.42337 c
h
7.8657589 257.42337 m
f
2 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -104 474 cm
111.86576 216.57663 m
278.36575 216.57663 l
280.02261 216.57663 281.36575 217.91978 281.36575 219.57663 c
281.36575 248.25 l
281.36575 249.90686 280.02261 251.25 278.36575 251.25 c
111.86576 251.25 l
110.20891 251.25 108.86576 249.90686 108.86576 248.25 c
108.86576 219.57663 l
108.86576 217.91978 110.20891 216.57663 111.86576 216.57663 c
h
111.86576 216.57663 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
125.78776 238.91331 m
(//\)0$-"1\)\(2$--'3",)[ 11.552000 11.552000 4.448000 9.488000 8.592000 8.000000 8.592000 9.488000 4.448000 8.592000 3.552000 8.592000 8.000000 8.000000 3.552000 8.288000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
0.5 31.932161 m
179.73152 31.932161 l
179.73152 3.5 l
0.5 3.5 l
h
0.5 31.932161 m
f
1 w
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
104.5 442.06784 m
283.73151 442.06784 l
283.73151 470.5 l
104.5 470.5 l
h
104.5 442.06784 m
S
0 i
1 1 1 sc
CM
10.334307 27.424623 m
23.514803 27.424623 l
24.619371 27.424623 25.514803 26.529192 25.514803 25.424623 c
25.514803 10.007538 l
25.514803 8.9029684 24.619371 8.0075378 23.514803 8.0075378 c
10.334307 8.0075378 l
9.2297363 8.0075378 8.3343067 8.9029684 8.3343067 10.007538 c
8.3343067 25.424623 l
8.3343067 26.529192 9.2297363 27.424623 10.334307 27.424623 c
h
10.334307 27.424623 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
114.3343 446.57538 m
127.5148 446.57538 l
128.61937 446.57538 129.5148 447.47079 129.5148 448.57538 c
129.5148 463.99246 l
129.5148 465.09705 128.61937 465.99246 127.5148 465.99246 c
114.3343 465.99246 l
113.22974 465.99246 112.3343 465.09705 112.3343 463.99246 c
112.3343 448.57538 l
112.3343 447.47079 113.22974 446.57538 114.3343 446.57538 c
h
114.3343 446.57538 m
S
0 i
1 1 1 sc
CM
38.682125 27.424623 m
51.862621 27.424623 l
52.96719 27.424623 53.862621 26.529192 53.862621 25.424623 c
53.862621 10.007538 l
53.862621 8.9029684 52.96719 8.0075378 51.862621 8.0075378 c
38.682125 8.0075378 l
37.577557 8.0075378 36.682125 8.9029684 36.682125 10.007538 c
36.682125 25.424623 l
36.682125 26.529192 37.577557 27.424623 38.682125 27.424623 c
h
38.682125 27.424623 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
142.68213 446.57538 m
155.86263 446.57538 l
156.96719 446.57538 157.86263 447.47079 157.86263 448.57538 c
157.86263 463.99246 l
157.86263 465.09705 156.96719 465.99246 155.86263 465.99246 c
142.68213 465.99246 l
141.57756 465.99246 140.68213 465.09705 140.68213 463.99246 c
140.68213 448.57538 l
140.68213 447.47079 141.57756 446.57538 142.68213 446.57538 c
h
142.68213 446.57538 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
67.029945 27.424623 m
80.210442 27.424623 l
81.31501 27.424623 82.210442 26.529192 82.210442 25.424623 c
82.210442 10.007538 l
82.210442 8.9029684 81.31501 8.0075378 80.210442 8.0075378 c
67.029945 8.0075378 l
65.925377 8.0075378 65.029945 8.9029684 65.029945 10.007538 c
65.029945 25.424623 l
65.029945 26.529192 65.925377 27.424623 67.029945 27.424623 c
h
67.029945 27.424623 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
171.02994 446.57538 m
184.21043 446.57538 l
185.315 446.57538 186.21043 447.47079 186.21043 448.57538 c
186.21043 463.99246 l
186.21043 465.09705 185.315 465.99246 184.21043 465.99246 c
171.02994 465.99246 l
169.92537 465.99246 169.02994 465.09705 169.02994 463.99246 c
169.02994 448.57538 l
169.02994 447.47079 169.92537 446.57538 171.02994 446.57538 c
h
171.02994 446.57538 m
S
0 i
1 1 1 sc
CM
95.377762 27.424623 m
108.55826 27.424623 l
109.66283 27.424623 110.55826 26.529192 110.55826 25.424623 c
110.55826 10.007538 l
110.55826 8.9029684 109.66283 8.0075378 108.55826 8.0075378 c
95.377762 8.0075378 l
94.273193 8.0075378 93.377762 8.9029684 93.377762 10.007538 c
93.377762 25.424623 l
93.377762 26.529192 94.273193 27.424623 95.377762 27.424623 c
h
95.377762 27.424623 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
199.37776 446.57538 m
212.55826 446.57538 l
213.66283 446.57538 214.55826 447.47079 214.55826 448.57538 c
214.55826 463.99246 l
214.55826 465.09705 213.66283 465.99246 212.55826 465.99246 c
199.37776 465.99246 l
198.27319 465.99246 197.37776 465.09705 197.37776 463.99246 c
197.37776 448.57538 l
197.37776 447.47079 198.27319 446.57538 199.37776 446.57538 c
h
199.37776 446.57538 m
S
0 i
1 1 1 sc
CM
123.72558 27.424623 m
136.90608 27.424623 l
138.01065 27.424623 138.90608 26.529192 138.90608 25.424623 c
138.90608 10.007538 l
138.90608 8.9029684 138.01065 8.0075378 136.90608 8.0075378 c
123.72558 8.0075378 l
122.62101 8.0075378 121.72558 8.9029684 121.72558 10.007538 c
121.72558 25.424623 l
121.72558 26.529192 122.62101 27.424623 123.72558 27.424623 c
h
123.72558 27.424623 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
227.72559 446.57538 m
240.90608 446.57538 l
242.01065 446.57538 242.90608 447.47079 242.90608 448.57538 c
242.90608 463.99246 l
242.90608 465.09705 242.01065 465.99246 240.90608 465.99246 c
227.72559 465.99246 l
226.62102 465.99246 225.72559 465.09705 225.72559 463.99246 c
225.72559 448.57538 l
225.72559 447.47079 226.62102 446.57538 227.72559 446.57538 c
h
227.72559 446.57538 m
S
0 i
1 1 1 sc
CM
152.35974 27.424623 m
165.54024 27.424623 l
166.64481 27.424623 167.54024 26.529192 167.54024 25.424623 c
167.54024 10.007538 l
167.54024 8.9029684 166.64481 8.0075378 165.54024 8.0075378 c
152.35974 8.0075378 l
151.25517 8.0075378 150.35974 8.9029684 150.35974 10.007538 c
150.35974 25.424623 l
150.35974 26.529192 151.25517 27.424623 152.35974 27.424623 c
h
152.35974 27.424623 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
256.35974 446.57538 m
269.54025 446.57538 l
270.64481 446.57538 271.54025 447.47079 271.54025 448.57538 c
271.54025 463.99246 l
271.54025 465.09705 270.64481 465.99246 269.54025 465.99246 c
256.35974 465.99246 l
255.25517 465.99246 254.35974 465.09705 254.35974 463.99246 c
254.35974 448.57538 l
254.35974 447.47079 255.25517 446.57538 256.35974 446.57538 c
h
256.35974 446.57538 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
314.28952 452.94791 m
(45$,$\(&",)[ 8.664000 6.672000 6.444000 3.996000 6.444000 6.444000 3.780000 6.444000 0.000000 ] xS
312.94553 467.28391 m
(\)-".+"%\(")[ 3.336000 6.000000 6.444000 7.116000 6.672000 6.444000 6.672000 6.444000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
6.8657589 109.92337 m
173.36575 109.92337 l
175.02261 109.92337 176.36575 108.58022 176.36575 106.92337 c
176.36575 78.25 l
176.36575 76.593147 175.02261 75.25 173.36575 75.25 c
6.8657589 75.25 l
5.2089047 75.25 3.8657589 76.593147 3.8657589 78.25 c
3.8657589 106.92337 l
3.8657589 108.58022 5.2089047 109.92337 6.8657589 109.92337 c
h
6.8657589 109.92337 m
f
2 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -104 474 cm
110.86576 364.07663 m
277.36575 364.07663 l
279.02261 364.07663 280.36575 365.41977 280.36575 367.07663 c
280.36575 395.75 l
280.36575 397.40686 279.02261 398.75 277.36575 398.75 c
110.86576 398.75 l
109.20891 398.75 107.86576 397.40686 107.86576 395.75 c
107.86576 367.07663 l
107.86576 365.41977 109.20891 364.07663 110.86576 364.07663 c
h
110.86576 364.07663 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
137.37177 386.41333 m
(6",&$'%"1\)789:)[ 10.368000 8.592000 5.328000 5.040000 8.592000 3.552000 8.896000 8.592000 9.488000 4.448000 10.960000 9.776000 10.672000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
54.727749 328.58273 m
125.50377 328.58273 l
125.50377 304.12814 l
54.727749 304.12814 l
h
54.727749 328.58273 m
f
1 w
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -104 474 cm
158.72775 145.41727 m
229.50377 145.41727 l
229.50377 169.87186 l
158.72775 169.87186 l
h
158.72775 145.41727 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
179.44576 161.14456 m
(;$0"2)[ 6.672000 6.444000 7.116000 6.444000 0.000000 ] xS
2 w
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
194.11575 442.06784 m
194.11575 412.64999 l
S
0 i
CM
90.115761 70.949997 m
86.515762 61.349998 l
93.715759 61.349998 l
h
90.115761 70.949997 m
f
0 J
0 j
1 0 0 -1 -104 474 cm
194.11575 403.04999 m
190.51576 412.64999 l
197.71576 412.64999 l
h
194.11575 403.04999 m
S
1 J
1 j
0.60000002 i
194.11575 363.07663 m
194.11575 334.77939 l
S
0 i
CM
90.115761 148.8206 m
86.515762 139.2206 l
93.715759 139.2206 l
h
90.115761 148.8206 m
f
0 J
0 j
1 0 0 -1 -104 474 cm
194.11575 325.17938 m
190.51576 334.77939 l
197.71576 334.77939 l
h
194.11575 325.17938 m
S
1 J
1 j
0.60000002 i
194.30852 293.44724 m
194.69223 265.1488 l
S
0 i
CM
90.822388 218.4503 m
87.09256 208.89999 l
94.291893 208.80238 l
h
90.822388 218.4503 m
f
0 J
0 j
1 0 0 -1 -104 474 cm
194.82239 255.5497 m
191.09256 265.10001 l
198.2919 265.19763 l
h
194.82239 255.5497 m
S
1 J
1 j
0.60000002 i
194.87534 215.57663 m
194.44521 182.77075 l
S
0 i
CM
90.319344 300.82843 m
86.845512 291.18204 l
94.044891 291.27646 l
h
90.319344 300.82843 m
f
0 J
0 j
1 0 0 -1 -104 474 cm
194.31934 173.17157 m
190.8455 182.81795 l
198.04489 182.72356 l
h
194.31934 173.17157 m
S
/Cs1 SC
0 sc
267.85175 155.70671 m
(6,<%+%\('$&'<%\))[ 7.776000 3.780000 6.888000 6.672000 6.672000 6.672000 6.444000 2.664000 6.444000 3.780000 2.664000 6.888000 6.672000 0.000000 ] xS
269.96375 170.04271 m
(<*\)=<2>=5<%>)[ 6.888000 3.552000 3.336000 7.116000 6.888000 2.664000 6.000000 7.116000 6.672000 6.888000 6.672000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
