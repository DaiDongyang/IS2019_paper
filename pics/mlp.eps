%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 188.000000 218.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 188 218
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 188 218
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /D put
dup 34 /e put
dup 35 /n put
dup 36 /s put
dup 37 /L put
dup 38 /a put
dup 39 /b put
dup 40 /l put
dup 41 /S put
dup 42 /m put
dup 43 /t put
dup 44 /i put
dup 45 /c put
dup 46 /space put
dup 47 /F put
dup 48 /u put
dup 49 /r put
dup 50 /q put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/space 1 def
/D 2 def
/F 3 def
/L 4 def
/S 5 def
/a 6 def
/b 7 def
/c 8 def
/e 9 def
/i 10 def
/l 11 def
/m 12 def
/n 13 def
/q 14 def
/r 15 def
/s 16 def
/t 17 def
/u 18 def
/uni2B91 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92626C4DEA81D313B50D8F4EBFA95F2709469CAA9CCEDFB298F70C76D2A079C6064909D0D6374E9360EB8776D8D76D6B6AF3EB748CD2A3628EB56CBAB35165193D4E5F9DB729E34BEF754A8E9338CDFF953D76EDA99D03F83948F794A0616E87457848A58CEEF8979C64E357C8CEAA65D5B552F6B54F91531A89F51EC175BAA2B70959A04990B11C5812CE421C17646E707E1706A9ABF2F3CEDAEE72EAC4FFC056A537C4C79A3BE79313C773B247E3C5A2D2FE5458A340D47CDAAB688EE267DA52C033454715147419F4AE50E4639AB93537BF68C450E9C249CC97805B34CC1A1408E3BFE735955FA8278EF5A531B264323CDF259EEFCE3BF964638A5497F1EE9C9BE773CA534E79AED94812BDA3904C8F5171D8F14EB871D5983D0D21C53135913FD75F0648E38748DD3A12B704C86A5A8D9E017BA234DA95CEE5C688E38E04A32BEA81F9AA9C510C71907FD00907FE145559CCD56CF47F241C96EB6500C53588ECC91122E75735FC321FDE9649BD8AEC43DCF79F50B02D51A7D79AF6E45329FF382096057D60DAF6EF10185BA349E2275DFB09D3B24EBC8C4476F5BEFCF5A93ED27EE0631B570BFF28B83008229AB3E5791C6AD9D0147A91DF3BFC23864210719BBCB251C027105BCB446DD7FB75693819429E73D09082030B87D7A942310B350CDD7A2DC62E2F3D0BF5ED1862CE7E9EDBE72DDDECC5C580FBBA49E61FED52C721D352E17385F89CE3E036B8299C537E4B1296DD2619BDA0E7B2252451596CF9
D7FA70D662D817D1B1B509E6E116E1772870C6B727CEA8B6140F224A67AE4782F87F51A2E374AAEBB8ED0B2FD1F49E2D7FB0B93422B96EB983AB57749E5DF8FFD2011BE837ACF98F1A331E8F54161832DA28CC00C9126ABC06A9A7244E7D2F643387B2A241925CA769A494EA629438867F24C7F64CEB7749F168328FFEC91185427B40EB93E05815A6C723C6B5B56A63CFB96CF69E4EDC5C00D8552A7FEAF158ED4B1AC5750C3FCF2F0AF32D32FD85FBDB11E6A434623B883D5C59FB21096700D8C53585343267383EFF6399DFBAB461C721ECE5F7D156B512907C7855C415152C99C8745CC2339F7964151B3BC3C1C2A63CDAC80BCA3920AD6E7D596177A35D3FAE236DABF3D44E7786F24D2127252E80B81D64CA128B2933A4EACD53D1EB6D2AF8CD5E04ECE17DAD10A2F80F1BF628C2D08B50AAFD38830365463A5938F76828EC7AEED1EB886251B34715FD98CCDE6E7CD1FF0B945B381577333E540BE41FC305A487614B6E542DFCA1C8A90005AAAD41BEA6502ED6FA21F44A98388C96598714F134E27E70F841681B42C26003D893E34F5A8775ADEBB41142C2C21893EFD7C9B921B647E7A791AF3223D01F95D3F8D34493322CADE5A633A4A3B1CE78C101EC34B25B404A848B8CDA7203FC42C50BFF726937F644F07F1326643960ED5198FD33E20EE878C1AA73275B39FFC0EE4194899DBFAF098C8297DE88EFC65DE9109AB81351CF23D24DA6BFD5EAC5FDA37C797284A278E69843DB14A255D211C0E38D61C31BE8A67912F1F6EB76F4BDC48DB80E12E3C3D8050C4E154E6876BBADF7A398716EBC88EF2EFFA0CFBC80E590ACB4A2CB5DA982371ABD885896A7682D36B4D1CF091326C07C086F45192C78CB12781A9DF5F5A6F2F40BDC6837CC7A47B4594AE74C3A8E0368F7C5E2935340BD75DA0072FCF6E2F69F8DF2996AEA32B6BF7A21850D9CD9BBCCAAF453D90CC0B13AD6E53303D9E6F3DA9836A602654C90F41A1918B1D8D0D0BBD4C41853056D81DC82002BE4B663876DA9C763EEFFD91300AE0205D6A5F24E53BDD0A9FE780E88FE68ADF0E11C8A593F7DFD287C9EDB2645609C9ACB4FAB9396470113A3A9D6B842EA93B59DC106E4C8AC414EA5CE9682F3B05AEBB75D4200A91173BC4BA3AC99742C9D11E830D3C8A1442A6F0D4E82B6EAD5FE39F6899DCB8B483226DFDFFCCD8252BC93CFC73703B45328C4278920498E53ADD0BAF9A99492EC34D4B8315E138CB93CC8F48695A9A1F8F3A9829B0261372F1E38B4B501585972A765D79C3F5F75B54785007B4B668AE40D811EA46EAEE8B6985859C9DEE7BB20E6F9B84E8078E705830CF5EF8E6F652ACC87893337A20CC9B1BD1475D9A339DCD9458D470D25AD3AF00C2AE8B7B44F4A82729DA9D92C12826D17FC0615381C0AC5D2304164487235CF8399EBD4D9D47770FD67C57302
F51C846A0735C1277688F2BB6111BD4B217B2A0B96CF8D2A7D183656C4E6EA47FE865E8DCAB3ABBF4334EE7C28104181FE59F12896E643BD9F40FD5960C99898DDC03562873048472B1F0337C66AEE8A4DBCC6A9CAE6CDD09A0F3B92A36C57B1D17D38B9432833F5AE29F28B84172F2EE2589AD81204313AD2CFCA7D1876672D1B2E99E12052CC461F310BEBA0CF8630E578FC4FBFE5CA6CC2F32E9FA608AF4136F39E34DAB207D64BD6B465458345120A3602C7525CDE7D48D517E0238D80CD930BEAEBC1EF65B8C67DA9D7ADCEEDBD128B26A87C6AC23662384886EAAF02806C885303ABFB66C23E9057D6E4EB10A66D0448D0FBD39BAF2526054D49E6682FC15F858D10E54FC4489944F28FB722EE0A810A0BF3121533E796CBC1A230B9E71ED4A18DF8D56ACFE4324C1BDD90EB204DA021FEAA585F9CEE2903562F351D81091369D7908E27CFAC81035A2D3E2AA99E51DF9B2A00CFB8B7094E4992D7392D904BD3607D18635285E3E92D13E7202972201495BF224D0CD65DDC937662BC695CBCAF4825DD2B14739770F33D38CBD6F731962A613B77B51DD4928D6F90715D5E3AAA2F1854A37B396F2A6E0F179544C21CA3F2500860720A5A355E54E4E02FBA04027E1B27A61543490E513A29BD658F2ACC5A4C76E720CA1715B68C1AA67AE1EF1D3F41D21FA3F9265FD5FDFD74C5460B5D7B7F507BF34D26DAF71C7A56465B6B40C284CD26EA2230B3C5E9AAFA78E60C7FF717DFA7F211C362067008F07266254029618C0D71FC8AD3C02B83035DA594BE79A7BEF18BB2A1AD258A0E42D616C883A2261DC76752F881FF4AE48EE30ACA5586F3931F4951417C9DD1B8778E01CF69235E90B406623D4B35A0C0D5EB80A5F507EC33D9D5145B242645FD393778C1A186A2C56212531A2E1B79719C31A039C85063A3241595D64D9EDB0FA4D47A00649AB63CA25FB646D53AB56BA0EB9FF754D9623F6F99BDB88C31C40DB22A6833B4652BD0DC6A746FFBE6D680B0F6D6CD7981EC6B7C5AA3BEEE102925A9D28D4A64CF3EF15252844757623F06523CE4218C7490609FECB72E16220E69CDF198A6214A6984500336BEA9CDED8C4BF408BEFCC539486D574CC98E0144A003AA9179DFF7292893E453C291EFCD46F94FA4C7AAD32091119D04CAFBB16365C18E4F90A5F64835810A3FC06C16DF1D685473C6F69E57DEDF0F175297A1F55BA3425261D3F071A6478FC5348A40F52EA3C87AD5E51F45E8CD2F59A6D6A5648C0ED53063C5DEE66011C9A743A399D138DA16BC5BC8EA933983297AE3E3041ACC5C3FC2E70E6164D260EC8965E16FF1F61513FACA5C62FF0108C554B7F4FF2DAFE33277A58CD5090E4FB81BAA615B6CE1D68ED306E62506E3244B540CE77F8D53CC32DA828F936382A2703EBE394D93546A410E8CB1146FEDA4B24E90C09F1A0380FE

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 188 218 rc
0 218 m
188 218 l
188 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-512.68658 777.70148 m
1012.6866 777.70148 l
1012.6866 -864.83582 l
-512.68658 -864.83582 l
h
-512.68658 777.70148 m
f
1.3832291 54.34713 m
186.58627 54.34713 l
186.58627 29.892532 l
1.3832291 29.892532 l
h
1.3832291 54.34713 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
99.383232 185.65288 m
284.58627 185.65288 l
284.58627 210.10747 l
99.383232 210.10747 l
h
99.383232 185.65288 m
S
0 i
1 1 1 sc
CM
11.478554 50.470181 m
25.231459 50.470181 l
26.336029 50.470181 27.231459 49.574749 27.231459 48.470181 c
27.231459 35.769482 l
27.231459 34.664909 26.336029 33.769482 25.231459 33.769482 c
11.478554 33.769482 l
10.373984 33.769482 9.4785538 34.664909 9.4785538 35.769482 c
9.4785538 48.470181 l
9.4785538 49.574749 10.373984 50.470181 11.478554 50.470181 c
h
11.478554 50.470181 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
109.47855 189.52982 m
123.23146 189.52982 l
124.33603 189.52982 125.23146 190.42525 125.23146 191.52982 c
125.23146 204.23051 l
125.23146 205.33508 124.33603 206.23051 123.23146 206.23051 c
109.47855 206.23051 l
108.37399 206.23051 107.47855 205.33508 107.47855 204.23051 c
107.47855 191.52982 l
107.47855 190.42525 108.37399 189.52982 109.47855 189.52982 c
h
109.47855 189.52982 m
S
0 i
1 1 1 sc
CM
40.770847 50.470181 m
54.52375 50.470181 l
55.628323 50.470181 56.52375 49.574749 56.52375 48.470181 c
56.52375 35.769482 l
56.52375 34.664909 55.628323 33.769482 54.52375 33.769482 c
40.770847 33.769482 l
39.666279 33.769482 38.770847 34.664909 38.770847 35.769482 c
38.770847 48.470181 l
38.770847 49.574749 39.666279 50.470181 40.770847 50.470181 c
h
40.770847 50.470181 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
138.77084 189.52982 m
152.52376 189.52982 l
153.62833 189.52982 154.52376 190.42525 154.52376 191.52982 c
154.52376 204.23051 l
154.52376 205.33508 153.62833 206.23051 152.52376 206.23051 c
138.77084 206.23051 l
137.66628 206.23051 136.77084 205.33508 136.77084 204.23051 c
136.77084 191.52982 l
136.77084 190.42525 137.66628 189.52982 138.77084 189.52982 c
h
138.77084 189.52982 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
70.063141 50.470181 m
83.816048 50.470181 l
84.920616 50.470181 85.816048 49.574749 85.816048 48.470181 c
85.816048 35.769482 l
85.816048 34.664909 84.920616 33.769482 83.816048 33.769482 c
70.063141 33.769482 l
68.958572 33.769482 68.063141 34.664909 68.063141 35.769482 c
68.063141 48.470181 l
68.063141 49.574749 68.958572 50.470181 70.063141 50.470181 c
h
70.063141 50.470181 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
168.06314 189.52982 m
181.81604 189.52982 l
182.92061 189.52982 183.81604 190.42525 183.81604 191.52982 c
183.81604 204.23051 l
183.81604 205.33508 182.92061 206.23051 181.81604 206.23051 c
168.06314 206.23051 l
166.95857 206.23051 166.06314 205.33508 166.06314 204.23051 c
166.06314 191.52982 l
166.06314 190.42525 166.95857 189.52982 168.06314 189.52982 c
h
168.06314 189.52982 m
S
0 i
1 1 1 sc
CM
99.355431 50.470181 m
113.10834 50.470181 l
114.21291 50.470181 115.10834 49.574749 115.10834 48.470181 c
115.10834 35.769482 l
115.10834 34.664909 114.21291 33.769482 113.10834 33.769482 c
99.355431 33.769482 l
98.250862 33.769482 97.355431 34.664909 97.355431 35.769482 c
97.355431 48.470181 l
97.355431 49.574749 98.250862 50.470181 99.355431 50.470181 c
h
99.355431 50.470181 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
197.35544 189.52982 m
211.10834 189.52982 l
212.21291 189.52982 213.10834 190.42525 213.10834 191.52982 c
213.10834 204.23051 l
213.10834 205.33508 212.21291 206.23051 211.10834 206.23051 c
197.35544 206.23051 l
196.25087 206.23051 195.35544 205.33508 195.35544 204.23051 c
195.35544 191.52982 l
195.35544 190.42525 196.25087 189.52982 197.35544 189.52982 c
h
197.35544 189.52982 m
S
0 i
1 1 1 sc
CM
128.64772 50.470181 m
142.40063 50.470181 l
143.5052 50.470181 144.40063 49.574749 144.40063 48.470181 c
144.40063 35.769482 l
144.40063 34.664909 143.5052 33.769482 142.40063 33.769482 c
128.64772 33.769482 l
127.54316 33.769482 126.64773 34.664909 126.64773 35.769482 c
126.64773 48.470181 l
126.64773 49.574749 127.54316 50.470181 128.64772 50.470181 c
h
128.64772 50.470181 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
226.64772 189.52982 m
240.40063 189.52982 l
241.5052 189.52982 242.40063 190.42525 242.40063 191.52982 c
242.40063 204.23051 l
242.40063 205.33508 241.5052 206.23051 240.40063 206.23051 c
226.64772 206.23051 l
225.54315 206.23051 224.64772 205.33508 224.64772 204.23051 c
224.64772 191.52982 l
224.64772 190.42525 225.54315 189.52982 226.64772 189.52982 c
h
226.64772 189.52982 m
S
0 i
1 1 1 sc
CM
21.242651 111.06985 m
132.63654 111.06985 l
133.7411 111.06985 134.63654 110.17442 134.63654 109.06985 c
134.63654 88.61525 l
134.63654 87.510681 133.7411 86.61525 132.63654 86.61525 c
21.242651 86.61525 l
20.138083 86.61525 19.242651 87.510681 19.242651 88.61525 c
19.242651 109.06985 l
19.242651 110.17442 20.138083 111.06985 21.242651 111.06985 c
h
21.242651 111.06985 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
119.24265 128.93015 m
230.63654 128.93015 l
231.7411 128.93015 232.63654 129.82558 232.63654 130.93015 c
232.63654 151.38475 l
232.63654 152.48932 231.7411 153.38475 230.63654 153.38475 c
119.24265 153.38475 l
118.13808 153.38475 117.24265 152.48932 117.24265 151.38475 c
117.24265 130.93015 l
117.24265 129.82558 118.13808 128.93015 119.24265 128.93015 c
h
119.24265 128.93015 m
S
/Cs3 SC
0 sc
0 i
/F1.1[ 12 0 0 -12 0 0]sf
157.93559 144.65746 m
(!"#$")[ 8.448000 6.444000 6.672000 6.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
21.242651 164.03493 m
132.63654 164.03493 l
133.7411 164.03493 134.63654 163.1395 134.63654 162.03493 c
134.63654 141.58032 l
134.63654 140.47575 133.7411 139.58032 132.63654 139.58032 c
21.242651 139.58032 l
20.138083 139.58032 19.242651 140.47575 19.242651 141.58032 c
19.242651 162.03493 l
19.242651 163.1395 20.138083 164.03493 21.242651 164.03493 c
h
21.242651 164.03493 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
119.24265 75.965073 m
230.63654 75.965073 l
231.7411 75.965073 232.63654 76.860504 232.63654 77.965073 c
232.63654 98.41967 l
232.63654 99.524239 231.7411 100.41967 230.63654 100.41967 c
119.24265 100.41967 l
118.13808 100.41967 117.24265 99.524239 117.24265 98.41967 c
117.24265 77.965073 l
117.24265 76.860504 118.13808 75.965073 119.24265 75.965073 c
h
119.24265 75.965073 m
S
/Cs1 SC
0 sc
0 i
157.93559 91.692375 m
(!"#$")[ 8.448000 6.444000 6.672000 6.000000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
174.93959 189.52982 m
174.93959 163.28474 l
S
0 i
CM
76.93959 84.715256 m
73.93959 76.715256 l
79.93959 76.715256 l
h
76.93959 84.715256 m
f
0 J
0 j
1 0 0 -1 -98 240 cm
174.93959 155.28474 m
171.93959 163.28474 l
177.93959 163.28474 l
h
174.93959 155.28474 m
S
1 J
1 j
0.60000002 i
174.93959 128.93015 m
174.93959 110.31967 l
S
0 i
CM
76.93959 137.68033 m
73.93959 129.68033 l
79.93959 129.68033 l
h
76.93959 137.68033 m
f
0 J
0 j
1 0 0 -1 -98 240 cm
174.93959 102.31967 m
171.93959 110.31967 l
177.93959 110.31967 l
h
174.93959 102.31967 m
S
1 1 1 sc
CM
0.5 217 m
153.17499 217 l
153.17499 192.54541 l
0.5 192.54541 l
h
0.5 217 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
98.5 23 m
251.17499 23 l
251.17499 47.454594 l
98.5 47.454594 l
h
98.5 23 m
S
/Cs1 SC
0 sc
0 i
157.1675 38.727299 m
(%&'"\($)[ 6.672000 6.444000 7.116000 6.444000 2.664000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
174.91602 75.965073 m
174.88014 57.354576 l
S
0 i
CM
76.864723 190.6454 m
73.88015 182.63963 l
79.880142 182.6512 l
h
76.864723 190.6454 m
f
0 J
0 j
1 0 0 -1 -98 240 cm
174.86473 49.354591 m
171.88016 57.360359 l
177.88014 57.348793 l
h
174.86473 49.354591 m
S
/Cs3 SC
0 sc
115.30352 231.22729 m
(\)"*&#+,-.)[ 7.776000 6.444000 10.236000 6.444000 6.672000 3.780000 2.664000 6.444000 0.000000 ] xS
169.09952 231.22729 m
(/)s
175.98752 231.22729 m
("&+01".)[ 6.444000 6.444000 3.780000 6.672000 3.780000 6.444000 0.000000 ] xS
212.88751 231.22729 m
(\))s
220.66351 231.22729 m
("20"#-")[ 6.444000 7.116000 6.672000 6.444000 6.672000 6.444000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
158.2359 50.470181 m
171.9888 50.470181 l
173.09338 50.470181 173.9888 49.574749 173.9888 48.470181 c
173.9888 35.769482 l
173.9888 34.664909 173.09338 33.769482 171.9888 33.769482 c
158.2359 33.769482 l
157.13133 33.769482 156.2359 34.664909 156.2359 35.769482 c
156.2359 48.470181 l
156.2359 49.574749 157.13133 50.470181 158.2359 50.470181 c
h
158.2359 50.470181 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -98 240 cm
256.2359 189.52982 m
269.9888 189.52982 l
271.09338 189.52982 271.9888 190.42525 271.9888 191.52982 c
271.9888 204.23051 l
271.9888 205.33508 271.09338 206.23051 269.9888 206.23051 c
256.2359 206.23051 l
255.13133 206.23051 254.2359 205.33508 254.2359 204.23051 c
254.2359 191.52982 l
254.2359 190.42525 255.13133 189.52982 256.2359 189.52982 c
h
256.2359 189.52982 m
S
ep
end
%%Trailer
%%EOF
