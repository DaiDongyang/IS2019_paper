%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 243.000000 253.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 243 253
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 243 253
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /ellipsis put
dup 34 /P put
dup 35 /r put
dup 36 /o put
dup 37 /n put
dup 38 /u put
dup 39 /c put
dup 40 /i put
dup 41 /a put
dup 42 /t put
dup 43 /s put
dup 44 /B put
dup 45 /E put
dup 46 /R put
dup 47 /T put
dup 48 /space put
dup 49 /O put
dup 50 /p put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70003004E0000028002CA000A0021002C0101BA0001000B00032BB8000110BA0019000700032BB8001910410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5DBA002900070019111239B800292F410500DA002900EA002900025D411B0009002900190029002900290039002900490029005900290069002900790029008900290099002900A9002900B9002900C90029000D5DB80012DCBA0016000B0012111239B8000110B80022D0B8001210B8002EDC00BA0022000C00032BB8002210BA000B000100032BB8000B10BA0000002300032BB8000010BA0016002300001112393031133533321E0215140623011121323E0235342627353E01353426272E0323033533321E0215140623ADBE1F372A184751FEE301593551371C464233373123102D343517A4D91E382B1A473F0197E307182C2639390133FD3623394A27425C0E02145339364A150A0A0501FD86F70B1B2E233C4400000001004E0000023E02CA000B0033BA0009000000032BB8000910B80004D000BA0004000100032BBA0000000900032BB8000010BA0008000500032BB800081030311311213521352135213521354E01F0FE6F0173FE8D018E02CAFD3650F750E35000000000020026FFF002D202DB0013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A007900




00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/space 1 def
/B 2 def
/E 3 def
/O 4 def
/P 5 def
/R 6 def
/T 7 def
/a 8 def
/c 9 def
/i 10 def
/n 11 def
/o 12 def
/p 13 def
/r 14 def
/s 15 def
/t 16 def
/u 17 def
/ellipsis 18 def
/uni2B91 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92626C4DEA81D313B50D8F4EBFA95F2709469CAA9CCEDFB298F70C76D2A079C6064909D0D6374E9360EB8776D8D76D6B6AF3EB748CD2A3628EB56CBAB35165193D4E5F9DB729E34BEF754A8E9338CDFF953D76EDA99D03F83948F794A0616E87457848A58CEEF891C5F47079E348A816F5523B6F5ACA849C28237949C82646E15351552833829724E5A0C1E7D5ABFC1A2F68559A75BD94C5BAA859854FFB87434FED86085CBC224A75355DCCF849EB702ED85DF34B81736AA6F2EDBA40865F92FD4F11BEA37839EFE21BD2917EE2CA146B587887A3040D6B5B9A755E90B1E8A01E7C99FE478141ACCAEA8A15D060350ACE0BD681C5B4F352368DBB242BE00A1E19000B35DA81DBEAC0641EFEA031C0919733A680F66FE90F872FC399CD55D339260B027C7F08FF72A3387E429E844B5FA11E46CFB1AD7207ACD2B68AD61A7F9A8544EE6EB66DF792F572FE7CB354574F55D1F8565FC8BFC44348919E7D8EC356F55822868B08F289C01D68A230ACAD7CF491A89E5E28D4005548D1269EC0025B9FB44770A50809ADEBA62CB54ACDB5C228B2E32B85BD38839CE51F9D653820934B29FBD6FD87F6AC22316A16730E30193CFBCD7FCBE48B42EEF72C1F6530B11DEDA5110B4F7FDF6F3555F302151E7EE5DE783EF2A2E12D49FE4AFB9562CC510520AAF41B00369BB548B5E2975B45DC4977DF7B01C1259A94DE0917080A807331FF2BA538D2E3462FDCE699624EE12AAC43FD5E4C5A40A7B312D4FFB3F3B1FC34D1
03350BCC09FB9B6CBDC435462D4CE3F273F9A7D15FA80571B6CAB635D5B67510FC134E63D0F14082264033E9D34887848624C4AC0CD5C38B51930D4974342D8B5BA853FC9A7805BA77353CF213D10F1084C42EAD60707E74D8E9FDB67DCAA4CA734D82432E4DADEBD4F0DF35C30CB01C625B45DFD6205AB2C31BA31AAE823A3618652356AF640B8A8256CBE34C07C31ADBF99A62E339AB870C4327E2B600B2EC3E87EA2923297AF009DB7D97B504753C4C2703D59CD94F3BBBDA0DDBE25AF5B1C3A10E722F494E3C8D86552AA5C62A64D5B3952270175062EB2850087296826347A020D242F14DC93BD608E7ADBE1942CE917624B03580E4CD7044E11AB6DDC1D008486B7A3F05B0C40EAABB90A518BB2CE0E4AAC5BDD5B38D510AB83F625964D1DD1C987F13F46F43D4AE5F9A5B5EA10FAE951D1400F3FF3831830E76A334C0ADECAC006E6AE58E47AEDCDFF47354F5B5F01A652CE87363CCCE54EF794257EB21E3B1585B0CE0BEC77A4B7A63468B17A88F9E88C0DD66903A8E70CE794EBF1DCEECCEA1AD49E2BE878BCD37F200305738D50E7E7A42AB09533EE54BD574AFB3C4B5736BCCD91F07E8A17EF5A585B2D7DA1B8F1C66D7F35C4D72EEADA189D3BCE4543A63D781A64AA386EBB74F382119E6A3148373FAF9AB853E9D1C28F749B10346E4356456C31B480B89373D9CD4AEE3EF9B366BF11C8FA6BF15A48C6198C9E6DEAF9896D6A9B2C891A53C5636A3E0A4DF2F77237F480B3FCFEC170746E050E942AC95EBF153AAEB07EE76C6655F1FCADA2FF38C2A7DA442A13C898034F85CA067B201AAE496A86A4DA8B587F2306756A219E4295D78ABA220A2C387938D4835C3F91F5D9A0E75E71522E32E7BC01259D2A58B214C806644579E988E53192EF84417907EF103E9B9097F0646DDF2AD5533F4E011DF093A6BD3F5F5812742D07C21DD5EED7D94D71CFD70651BCBC5A1504FD570A4ECA345CD0A79E826F6DF291027BA6E49A952409DE16F6C9157D229524CFEA8E3FC087298FD54F4FF89846813F9B09C666C1CF5986996C77D537FB2EB2E978187B7E5FDE0C2702F63B4D68E4EC0BF3E3B41DA679724BBA40100CBA4E4F96CF724B7AD549EDC873CCBA89ACEB6724DAA70F00219C66B8FD3738ECD968FFCAB117CB174B0261537369F7172DB175FB8F34F36EF9313C6E149414D541748D688F51F5EAA1C9EC829351EB7E29FA090C58C1D03812EA05592620CD5944F840D8CB9C5F29BFC6862C5F28219B020FA843BB025EC5F8A0CF661E36F8C89B8EF0E45FF81FD2A80185DE2A46278EED57B237C4EC6F10630CACD93BB8108E58299DD81933BBE91C06710CD42B4A0C11F878999017DEE843A536894DB44484E2E1A75D635C0C49FF98AF9483AE6A28E194D925163C4AB630324BDF4E51A6A8A468F6C07BE4401B87484590FEADDF6CBCE
C434F08FF075554D497B84111A3E546BC9161717B3C5209E30C33F174513697BABE3BEFF999DDFC4EBC9EE546C6BCBA0C52097259E0384DFD611C23ED7953C6B5D0A76974A4BB89B679D54234EDEF350BF64EC9BAF7C6315B92D0C698414BEB68EA94AF18A889E38EDBD56379FA38CDFAD396355984CC8B22E9D0FEB31319E2C672499AE2328466E44A5093B91350829DB558D6A391ECC4875BDEED6FBE92F9231018D4075B161DA90D5C111FD4B40D513E17897E252E222BA67E9F489C005E5B3D9B0FC25E4954E1C35DCC594E6008D244EC2D572BB3C773D9DC3B0B7E7E9413ED7AFB649B334A4417BD0B5226626CC6A24D2E97A8CCD00A0C4172326F31CC7E8B1510C48CF174636F0F6E384DE639DD78E4483679A98FAC0E4BFE604E83D277BBAEA003F1ED30E6D3BD0F49D073E36651A96A4B920B221EFCD9337068CD8383B319C33D74B63F893C86F2F95DEA27CB27099E957EC1E3F779265B73AEE939F912AED2B9E4769639132E457C7D90F75C6F0FF24D88A279CFA1EC170E5617B08098A3D717C9DD0C7B470A31B06283EEE23A71646616B794F2699BF18AA77B601EDA9096CE05D84A9835F3CDB86F284125CB84120EC1E5B85788C6F75A66762B2EA9AE68EDE2DC753B340C906388FFD7C7D6FAFCEC51205FE5D1A6B388FBB26F5DB1173D5F24A6E55BAE6DC2BA28A308F218249D572EBE468FD2267DE724E3AC8C53D2673E716837D53AD5BE0955A16AB245E7BD8DC8A15806AB15AC0EF11868CE06AB31ACFDD697B0F132F1DDAF8B43A9142073E4F9952D296B194933AFC7E6D9DBD122E7AB520098371AA04DF2E8D8C435EEC17AE1661D405CED4184C9F0F455F296C4E5F1D9E213274279BC8E5EBABA1CA57D476F9CB75D0CC5E6E2EE84AD1FAB57582635FA18B902637451C0E5375294135B0B39826DA61A7CE303FBC49AA2E7B20F396A2CF483B3C1F30E84830270A364D9E908576991E36C6BCD846FFE8423D1B76A18CD2642B63969379E3A5D91966E36255D2761D0786C4CF57C002EA09E76C6AE6DDE8B3D902EC4F3B99A0B11BEC45CA0F15399460B82DB1381AB3838B4E7A4293FB825FECED22E7E6698CAB8A08678A09A7D7F7C39F5D5E8954F52ECC089CDBEF6AE09835691E6782A4BE44B4049BC63817FC547F6E354B0667ACD6FB09C3EB53C7572853D185A7AF2384A3B72E249ADA4AD3287C7F648C4C59D9C571E642268D042B9D85A91080D4ECFD006479406E3E5ABA2F5F1C85E474912B3F919DD3A099CF3A242695C697EE9AA1EDCEBE29C3806A370B87839B8B717E386A43A9CAC82B78763FA56446DCDFF2FABD06674946C7FF2E1279B06E6E17BF7869836DB1A42189FCF553A85288F77617B69A9D0BD09DDCFF62585CD7CA1ADB6E66517A06E6BE8E0D4F8F76196E7DA2FCEB9FD1F97B1C480441F7A96812AF3FB7CB
1522F90FDF3F535431C358E0221D148B681BF8BE7F3422D2693DE8B08C0897C55C437E04A706BAF4CAD63C9E9236C72F08B94398479C95BAB8CDCAC5927DEF2A850AE870455C306547F5175B7920C2D6E0A28F5CA1C6A7A8D1BECA4BFFAEDE07190A6B8B8AC324726C0F414816120A6B59E1F252AB0A6E8A698BCAFEDC873B14CC54911BF1F9DF356149342EAFE289422FE28A73A3C239B2FE02097B4E989B01C9D5B16258E70C38D71E7514BB827A109C55F1B973F84BE72C42D5A251AAE27E62C14610704E2B1E3565E8025C38CCD87F128898443DFED48277C83CC5108FEA173378B266773FFCE3A9EB384CD91E335EB226DC27858A65274BDFE2BA83C4A60E931BE8070CA82C9BA84C50012BC29DA0771C1483F44AF2777899C67ADDE3B6273B0874B51BF9F1C64A81B099810F53CB4620E30B73340AEFA17B71BAA5B8513E15A94F86552EA30A6B92A577D90B5DC25AD9DB1ED75DBFEC28A46810E662DB7F47A9A062E93BF252AA2A1BC721FDA3205C96DAE57BA774A530FC6E530C80767B64DC14130670D5B67DC9315CED22175442E1307E561061F8054FF1A9922EFDA41C1A65876842D5B10D0EB17CDAC9E7F98DA779D4A49EE3AF35B87DCC70B5BD75CC13E4D8D95FF88D1B12AB6FAB84B2C61C55C8F846082ED74C3195837D43CCD969DD2742CE738D86FCD733B850EB244541324DAD2FF730CDFC5AD0AA5DC342FEA959A3F27C6AA4D28FEC821265C8E627A4B0DC542F4BB865DA089F32B4344E208B14040F5308D6EFE87DEE43A00E1C43F0B74636BBFEDB21DE413E77B9CBD31B4A0C5E7FA22B0D67E5FA225544E7D376C79AFEA537C250727CF80F0C8676930F03E935C208CD6ED4C6B9CE1ADA6DC634AA2851D976523805C159A21B8B393FA4DE930A5C8C2CE644DF3EEAC6B66FB039DF5ADA3126F2711D56FD3EC3CB2622314C779A2B764ABAE7BD0790CE6E4F799C3B07E7A9369D3ACEC816AF59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 243 253 rc
0 253 m
243 253 l
243 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-611.59418 781.98553 m
1210.8695 781.98553 l
1210.8695 -769.46375 l
-611.59418 -769.46375 l
h
-611.59418 781.98553 m
f
22.563744 155.7234 m
165.06375 155.7234 l
166.16832 155.7234 167.06375 154.82797 167.06375 153.7234 c
167.06375 133.26881 l
167.06375 132.16425 166.16832 131.26881 165.06375 131.26881 c
22.563744 131.26881 l
21.459175 131.26881 20.563744 132.16425 20.563744 133.26881 c
20.563744 153.7234 l
20.563744 154.82797 21.459175 155.7234 22.563744 155.7234 c
h
22.563744 155.7234 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1395.5637 718.27661 m
1538.0637 718.27661 l
1539.1683 718.27661 1540.0637 719.172 1540.0637 720.27661 c
1540.0637 740.7312 l
1540.0637 741.83575 1539.1683 742.7312 1538.0637 742.7312 c
1395.5637 742.7312 l
1394.4592 742.7312 1393.5637 741.83575 1393.5637 740.7312 c
1393.5637 720.27661 l
1393.5637 719.172 1394.4592 718.27661 1395.5637 718.27661 c
h
1395.5637 718.27661 m
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
40.767101 150.72194 m
44.281834 147.20723 44.281834 141.50874 40.767101 137.99403 c
37.252384 134.47929 31.553909 134.47929 28.039194 137.99403 c
24.52446 141.50874 24.52446 147.20723 28.039194 150.72194 c
31.553909 154.23668 37.252384 154.23668 40.767101 150.72194 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1413.7671 723.27808 m
1417.2819 726.79279 1417.2819 732.49127 1413.7671 736.00598 c
1410.2524 739.52069 1404.554 739.52069 1401.0392 736.00598 c
1397.5244 732.49127 1397.5244 726.79279 1401.0392 723.27808 c
1404.554 719.76331 1410.2524 719.76331 1413.7671 723.27808 c
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
67.76487 150.35587 m
71.27961 146.84116 71.27961 141.14267 67.76487 137.62796 c
64.25016 134.11322 58.551682 134.11322 55.036964 137.62796 c
51.522232 141.14267 51.522232 146.84116 55.036964 150.35587 c
58.551682 153.87061 64.25016 153.87061 67.76487 150.35587 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1440.7649 723.6441 m
1444.2797 727.15887 1444.2797 732.8573 1440.7649 736.37201 c
1437.2501 739.88678 1431.5516 739.88678 1428.037 736.37201 c
1424.5222 732.8573 1424.5222 727.15887 1428.037 723.6441 c
1431.5516 720.12939 1437.2501 720.12939 1440.7649 723.6441 c
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
129.84244 150.35587 m
133.35716 146.84116 133.35716 141.14267 129.84244 137.62796 c
126.32771 134.11322 120.62924 134.11322 117.11452 137.62796 c
113.59978 141.14267 113.59978 146.84116 117.11452 150.35587 c
120.62924 153.87061 126.32771 153.87061 129.84244 150.35587 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1502.8424 723.6441 m
1506.3572 727.15887 1506.3572 732.8573 1502.8424 736.37201 c
1499.3278 739.88678 1493.6293 739.88678 1490.1145 736.37201 c
1486.5997 732.8573 1486.5997 727.15887 1490.1145 723.6441 c
1493.6293 720.12939 1499.3278 720.12939 1502.8424 723.6441 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
1458.4397 731.23511 m
(!)s
/Cs2 SC
0.85490203 0.85490203 0.85490203 sc
CM
156.84019 150.72194 m
160.35493 147.20723 160.35493 141.50874 156.84019 137.99403 c
153.32549 134.47929 147.62701 134.47929 144.11229 137.99403 c
140.59756 141.50874 140.59756 147.20723 144.11229 150.72194 c
147.62701 154.23668 153.32549 154.23668 156.84019 150.72194 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1529.8402 723.27808 m
1533.355 726.79279 1533.355 732.49127 1529.8402 736.00598 c
1526.3254 739.52069 1520.627 739.52069 1517.1123 736.00598 c
1513.5975 732.49127 1513.5975 726.79279 1517.1123 723.27808 c
1520.627 719.76331 1526.3254 719.76331 1529.8402 723.27808 c
S
0.49998799 0.5 0.5 sc
1407.4032 768.73511 m
1407.4032 738.64203 l
S
1434.5026 768.73511 m
1434.4246 739.00806 l
S
1496.4785 768.73511 m
1496.4785 739.00812 l
S
1523.4762 768.77667 m
1523.4762 738.64203 l
S
1407.4032 767.23511 m
1434.4269 739.90167 l
S
1407.4032 768.0351 m
1496.4785 739.50842 l
S
1407.4032 767.63507 m
1523.4762 739.43237 l
S
1434.5007 768.03833 m
1407.4032 739.23706 l
S
1434.5017 768.43518 m
1496.4785 739.32526 l
S
1434.4991 767.43781 m
1523.4762 739.54645 l
S
1496.4785 768.43512 m
1407.4032 739.79535 l
S
1496.4785 768.0351 m
1483.0156 764.10651 l
S
1496.4785 768.43512 m
1434.4268 739.87048 l
S
1496.4785 767.83508 m
1523.4762 739.14545 l
S
1523.4762 768.43512 m
1407.4032 739.03375 l
S
1523.4762 768.23511 m
1434.4263 739.66437 l
S
1523.4762 767.63507 m
1496.4785 739.30536 l
S
0 i
1 1 1 sc
CM
3 207.45459 m
70.467178 207.45459 l
71.571747 207.45459 72.467178 206.55916 72.467178 205.45459 c
72.467178 185 l
72.467178 183.89543 71.571747 183 70.467178 183 c
3 183 l
1.8954304 183 1 183.89543 1 185 c
1 205.45459 l
1 206.55916 1.8954304 207.45459 3 207.45459 c
h
3 207.45459 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1376 666.54541 m
1443.4672 666.54541 l
1444.5718 666.54541 1445.4672 667.44086 1445.4672 668.54541 c
1445.4672 689 l
1445.4672 690.10455 1444.5718 691 1443.4672 691 c
1376 691 l
1374.8954 691 1374 690.10455 1374 689 c
1374 668.54541 l
1374 667.44086 1374.8954 666.54541 1376 666.54541 c
h
1376 666.54541 m
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
21.797699 201.59125 m
25.312431 198.07654 25.312431 192.37807 21.797699 188.86334 c
18.282982 185.3486 12.584506 185.3486 9.0697899 188.86334 c
5.5550561 192.37807 5.5550561 198.07654 9.0697899 201.59125 c
12.584506 205.10599 18.282982 205.10599 21.797699 201.59125 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1394.7977 672.40875 m
1398.3124 675.92346 1398.3124 681.62195 1394.7977 685.13666 c
1391.283 688.65137 1385.5845 688.65137 1382.0698 685.13666 c
1378.5551 681.62195 1378.5551 675.92346 1382.0698 672.40875 c
1385.5845 668.89404 1391.283 668.89404 1394.7977 672.40875 c
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
65.342079 201.59125 m
68.856819 198.07654 68.856819 192.37807 65.342079 188.86334 c
61.827366 185.3486 56.128891 185.3486 52.614174 188.86334 c
49.099442 192.37807 49.099442 198.07654 52.614174 201.59125 c
56.128891 205.10599 61.827366 205.10599 65.342079 201.59125 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1438.342 672.40875 m
1441.8568 675.92346 1441.8568 681.62195 1438.342 685.13666 c
1434.8274 688.65137 1429.1289 688.65137 1425.6141 685.13666 c
1422.0995 681.62195 1422.0995 675.92346 1425.6141 672.40875 c
1429.1289 668.89404 1434.8274 668.89404 1438.342 672.40875 c
S
/Cs1 SC
0 sc
0 i
1403.2059 683.27271 m
(!)s
/Cs2 SC
1 1 1 sc
CM
119.32949 208.44621 m
186.79666 208.44621 l
187.90123 208.44621 188.79666 207.55078 188.79666 206.44621 c
188.79666 185.99161 l
188.79666 184.88704 187.90123 183.99161 186.79666 183.99161 c
119.32949 183.99161 l
118.22492 183.99161 117.32949 184.88704 117.32949 185.99161 c
117.32949 206.44621 l
117.32949 207.55078 118.22492 208.44621 119.32949 208.44621 c
h
119.32949 208.44621 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1492.3295 665.55377 m
1559.7966 665.55377 l
1560.9012 665.55377 1561.7966 666.44922 1561.7966 667.55377 c
1561.7966 688.00836 l
1561.7966 689.11298 1560.9012 690.00836 1559.7966 690.00836 c
1492.3295 690.00836 l
1491.225 690.00836 1490.3295 689.11298 1490.3295 688.00836 c
1490.3295 667.55377 l
1490.3295 666.44922 1491.225 665.55377 1492.3295 665.55377 c
h
1492.3295 665.55377 m
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
138.12718 202.58286 m
141.64192 199.06815 141.64192 193.36967 138.12718 189.85495 c
134.61247 186.34023 128.914 186.34023 125.39928 189.85495 c
121.88454 193.36967 121.88454 199.06815 125.39928 202.58286 c
128.914 206.0976 134.61247 206.0976 138.12718 202.58286 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1511.1272 671.41711 m
1514.642 674.93182 1514.642 680.63031 1511.1272 684.14502 c
1507.6124 687.65979 1501.9139 687.65979 1498.3993 684.14502 c
1494.8845 680.63031 1494.8845 674.93182 1498.3993 671.41711 c
1501.9139 667.9024 1507.6124 667.9024 1511.1272 671.41711 c
S
0 i
0.85490203 0.85490203 0.85490203 sc
CM
181.67157 202.58286 m
185.18631 199.06815 185.18631 193.36967 181.67157 189.85495 c
178.15686 186.34023 172.45837 186.34023 168.94366 189.85495 c
165.42892 193.36967 165.42892 199.06815 168.94366 202.58286 c
172.45837 206.0976 178.15686 206.0976 181.67157 202.58286 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1373 874 cm
1554.6716 671.41711 m
1558.1863 674.93182 1558.1863 680.63031 1554.6716 684.14502 c
1551.1569 687.65979 1545.4584 687.65979 1541.9436 684.14502 c
1538.429 680.63031 1538.429 674.93182 1541.9436 671.41711 c
1545.4584 667.9024 1551.1569 667.9024 1554.6716 671.41711 c
S
/Cs1 SC
0 sc
0 i
1519.5354 682.28107 m
(!)s
0.60000002 i
/Cs2 SC
0.49998799 0.5 0.5 sc
1404.2578 721.20721 m
1391.5791 687.20752 l
S
1432.7659 721.19629 m
1391.7308 687.61438 l
S
1495.5396 720.35382 m
1392.3608 688.24438 l
S
1523.2769 719.80444 m
1392.9908 688.14441 l
S
/Cs1 SC
0 sc
0 i
1458.4397 682 m
(!)s
0.60000002 i
/Cs2 SC
0.49998799 0.5 0.5 sc
1432.7659 721.19629 m
1432.1453 687.77118 l
S
1404.0271 720.58875 m
1432.1514 688.10541 l
S
1495.5396 720.35382 m
1432.1589 688.50848 l
S
1523.2769 719.80444 m
1432.1514 688.10541 l
S
1404.0221 720.57507 m
1505.1627 686.41492 l
1505.1627 687.89478 l
1505.1627 686.54895 l
S
1403.8773 720.18689 m
1548.5563 687.12775 l
S
1432.7659 721.19629 m
1505.1627 687.89478 l
S
1434.2257 720.64203 m
1548.5563 687.12775 l
S
1498.2422 721.18164 m
1505.1627 686.54895 l
S
1498.5447 719.66785 m
1548.5563 687.12775 l
S
1523.2769 719.57812 m
1505.1627 686.41492 l
S
1523.2769 719.57812 m
1549.6805 687.6424 l
S
0 i
1 1 1 sc
CM
37.475109 209.44708 m
33.625282 209.44708 l
33.625282 213.75537 l
31.700371 213.75537 l
35.550198 224.75537 l
39.400021 213.75537 l
37.475109 213.75537 l
h
37.475109 209.44708 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1410.4751 664.55292 m
1406.6252 664.55292 l
1406.6252 660.24463 l
1404.7003 660.24463 l
1408.5502 649.24463 l
1412.4 660.24463 l
1410.4751 660.24463 l
h
1410.4751 664.55292 m
S
0 i
1 1 1 sc
CM
154.98799 210.29454 m
151.13817 210.29454 l
151.13817 214.60283 l
149.21326 214.60283 l
153.06308 225.60283 l
156.9129 214.60283 l
154.98799 214.60283 l
h
154.98799 210.29454 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1527.988 663.70544 m
1524.1382 663.70544 l
1524.1382 659.39716 l
1522.2133 659.39716 l
1526.0631 648.39716 l
1529.9128 659.39716 l
1527.988 659.39716 l
h
1527.988 663.70544 m
S
0 i
1 1 1 sc
CM
2 251.58302 m
71.467178 251.58302 l
72.019463 251.58302 72.467178 251.1353 72.467178 250.58302 c
72.467178 228.12843 l
72.467178 227.57614 72.019463 227.12843 71.467178 227.12843 c
2 227.12843 l
1.4477153 227.12843 1 227.57614 1 228.12843 c
1 250.58302 l
1 251.1353 1.4477153 251.58302 2 251.58302 c
h
2 251.58302 m
f
[
4
4
] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1375 622.41699 m
1444.4672 622.41699 l
1445.0194 622.41699 1445.4672 622.86469 1445.4672 623.41699 c
1445.4672 645.87158 l
1445.4672 646.42383 1445.0194 646.87158 1444.4672 646.87158 c
1375 646.87158 l
1374.4478 646.87158 1374 646.42383 1374 645.87158 c
1374 623.41699 l
1374 622.86469 1374.4478 622.41699 1375 622.41699 c
h
1375 622.41699 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 9 0 0 -9 0 0]sf
1379.7275 638.01825 m
("#$%&%'\(\)*\($%+)[ 5.832000 2.835000 5.166000 5.004000 5.004000 5.004000 4.833000 1.998000 4.833000 2.835000 1.998000 5.166000 5.004000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
118.32949 251.58302 m
187.79666 251.58302 l
188.34895 251.58302 188.79666 251.1353 188.79666 250.58302 c
188.79666 228.12843 l
188.79666 227.57614 188.34895 227.12843 187.79666 227.12843 c
118.32949 227.12843 l
117.77721 227.12843 117.32949 227.57614 117.32949 228.12843 c
117.32949 250.58302 l
117.32949 251.1353 117.77721 251.58302 118.32949 251.58302 c
h
118.32949 251.58302 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1491.3295 622.41699 m
1560.7966 622.41699 l
1561.349 622.41699 1561.7966 622.86469 1561.7966 623.41699 c
1561.7966 645.87158 l
1561.7966 646.42383 1561.349 646.87158 1560.7966 646.87158 c
1491.3295 646.87158 l
1490.7772 646.87158 1490.3295 646.42383 1490.3295 645.87158 c
1490.3295 623.41699 l
1490.3295 622.86469 1490.7772 622.41699 1491.3295 622.41699 c
h
1491.3295 622.41699 m
S
/Cs1 SC
0 sc
0 i
1496.0571 638.01825 m
("#$%&%'\(\)*\($%+)[ 5.832000 2.835000 5.166000 5.004000 5.004000 5.004000 4.833000 1.998000 4.833000 2.835000 1.998000 5.166000 5.004000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
21.303743 109.12416 m
165.80374 109.12416 l
166.35603 109.12416 166.80374 108.67645 166.80374 108.12416 c
166.80374 85.669571 l
166.80374 85.117287 166.35603 84.669571 165.80374 84.669571 c
21.303743 84.669571 l
20.751459 84.669571 20.303743 85.117287 20.303743 85.669571 c
20.303743 108.12416 l
20.303743 108.67645 20.751459 109.12416 21.303743 109.12416 c
h
21.303743 109.12416 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1394.3037 764.87585 m
1538.8037 764.87585 l
1539.3561 764.87585 1539.8037 765.32355 1539.8037 765.87585 c
1539.8037 788.33044 l
1539.8037 788.88269 1539.3561 789.33044 1538.8037 789.33044 c
1394.3037 789.33044 l
1393.7515 789.33044 1393.3037 788.88269 1393.3037 788.33044 c
1393.3037 765.87585 l
1393.3037 765.32355 1393.7515 764.87585 1394.3037 764.87585 c
h
1394.3037 764.87585 m
S
0 i
1 1 1 sc
CM
21.303743 62.524921 m
165.80374 62.524921 l
166.35603 62.524921 166.80374 62.077206 166.80374 61.524921 c
166.80374 39.070324 l
166.80374 38.51804 166.35603 38.070324 165.80374 38.070324 c
21.303743 38.070324 l
20.751459 38.070324 20.303743 38.51804 20.303743 39.070324 c
20.303743 61.524921 l
20.303743 62.077206 20.751459 62.524921 21.303743 62.524921 c
h
21.303743 62.524921 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1394.3037 811.4751 m
1538.8037 811.4751 l
1539.3561 811.4751 1539.8037 811.92279 1539.8037 812.4751 c
1539.8037 834.92969 l
1539.8037 835.48193 1539.3561 835.92969 1538.8037 835.92969 c
1394.3037 835.92969 l
1393.7515 835.92969 1393.3037 835.48193 1393.3037 834.92969 c
1393.3037 812.4751 l
1393.3037 811.92279 1393.7515 811.4751 1394.3037 811.4751 c
h
1394.3037 811.4751 m
S
0 i
1 1 1 sc
CM
50.225224 42.317272 m
50.225224 57.347904 l
52.000515 59.017971 l
67.978127 59.017971 l
67.978127 43.987343 l
66.202835 42.317272 l
h
50.225224 42.317272 m
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1423.2252 831.68274 m
1423.2252 816.6521 l
1425.0005 814.98206 l
1440.9781 814.98206 l
1440.9781 830.01263 l
1439.2029 831.68274 l
1423.2252 831.68274 l
1423.2252 816.6521 m
1439.2029 816.6521 l
1440.9781 814.98206 l
1439.2029 816.6521 m
1439.2029 831.68274 l
S
0 i
0 0 0 sc
CM
72.593315 42.317272 m
72.593315 57.347904 l
74.368599 59.017971 l
90.346214 59.017971 l
90.346214 43.987343 l
88.57093 42.317272 l
h
72.593315 42.317272 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1445.5933 831.68274 m
1445.5933 816.6521 l
1447.3687 814.98206 l
1463.3462 814.98206 l
1463.3462 830.01263 l
1461.5709 831.68274 l
1445.5933 831.68274 l
1445.5933 816.6521 m
1461.5709 816.6521 l
1463.3462 814.98206 l
1461.5709 816.6521 m
1461.5709 831.68274 l
S
0 i
1 1 1 sc
CM
94.961403 42.317272 m
94.961403 57.347904 l
96.736694 59.017971 l
112.7143 59.017971 l
112.7143 43.987343 l
110.93902 42.317272 l
h
94.961403 42.317272 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1467.9614 831.68274 m
1467.9614 816.6521 l
1469.7367 814.98206 l
1485.7144 814.98206 l
1485.7144 830.01263 l
1483.939 831.68274 l
1467.9614 831.68274 l
1467.9614 816.6521 m
1483.939 816.6521 l
1485.7144 814.98206 l
1483.939 816.6521 m
1483.939 831.68274 l
S
0 i
1 1 1 sc
CM
117.32949 42.317272 m
117.32949 57.347904 l
119.10478 59.017971 l
135.0824 59.017971 l
135.0824 43.987343 l
133.3071 42.317272 l
h
117.32949 42.317272 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1490.3295 831.68274 m
1490.3295 816.6521 l
1492.1047 814.98206 l
1508.0824 814.98206 l
1508.0824 830.01263 l
1506.3071 831.68274 l
1490.3295 831.68274 l
1490.3295 816.6521 m
1506.3071 816.6521 l
1508.0824 814.98206 l
1506.3071 816.6521 m
1506.3071 831.68274 l
S
0 i
1 1 1 sc
CM
27.857136 42.317272 m
27.857136 57.347904 l
29.632425 59.017971 l
45.610039 59.017971 l
45.610039 43.987343 l
43.834751 42.317272 l
h
27.857136 42.317272 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1400.8572 831.68274 m
1400.8572 816.6521 l
1402.6324 814.98206 l
1418.61 814.98206 l
1418.61 830.01263 l
1416.8347 831.68274 l
1400.8572 831.68274 l
1400.8572 816.6521 m
1416.8347 816.6521 l
1418.61 814.98206 l
1416.8347 816.6521 m
1416.8347 831.68274 l
S
0 i
1 1 1 sc
CM
139.69757 42.317272 m
139.69757 57.347904 l
141.47287 59.017971 l
157.45049 59.017971 l
157.45049 43.987343 l
155.67519 42.317272 l
h
139.69757 42.317272 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1512.6976 831.68274 m
1512.6976 816.6521 l
1514.4729 814.98206 l
1530.4504 814.98206 l
1530.4504 830.01263 l
1528.6752 831.68274 l
1512.6976 831.68274 l
1512.6976 816.6521 m
1528.6752 816.6521 l
1530.4504 814.98206 l
1528.6752 816.6521 m
1528.6752 831.68274 l
S
0 i
0 0 0 sc
CM
25.526695 105.26492 m
43.279598 105.26492 l
43.279598 88.564224 l
25.526695 88.564224 l
h
25.526695 105.26492 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1398.5267 768.73511 m
1416.2795 768.73511 l
1416.2795 785.43579 l
1398.5267 785.43579 l
h
1398.5267 768.73511 m
S
0 i
0 0 0 sc
CM
52.648014 105.26492 m
70.400917 105.26492 l
70.400917 88.564224 l
52.648014 88.564224 l
h
52.648014 105.26492 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1425.6481 768.73511 m
1443.4009 768.73511 l
1443.4009 785.43579 l
1425.6481 785.43579 l
h
1425.6481 768.73511 m
S
0 i
0 0 0 sc
CM
114.60202 105.26492 m
132.35493 105.26492 l
132.35493 88.564224 l
114.60202 88.564224 l
h
114.60202 105.26492 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1487.6021 768.73511 m
1505.355 768.73511 l
1505.355 785.43579 l
1487.6021 785.43579 l
h
1487.6021 768.73511 m
S
0 i
0 0 0 sc
CM
141.59979 105.22333 m
159.35271 105.22333 l
159.35271 88.522629 l
141.59979 88.522629 l
h
141.59979 105.22333 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -1373 874 cm
1514.5999 768.77667 m
1532.3527 768.77667 l
1532.3527 785.47736 l
1514.5999 785.47736 l
h
1514.5999 768.77667 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
1458.5015 780.33044 m
(!)s
2 w
0.60000002 i
/Cs2 SC
0 0 0 sc
1454.4418 814.98206 m
1454.4001 802.58105 l
S
0 i
CM
81.368019 81.01889 m
77.800224 71.406876 l
85.000183 71.431007 l
h
81.368019 81.01889 m
f
0 J
0 j
1 0 0 -1 -1373 874 cm
1454.368 792.98114 m
1450.8002 802.59314 l
1458.0001 802.56897 l
h
1454.368 792.98114 m
S
/Cs1 SC
0 sc
/F1.1[ 9 0 0 -9 0 0]sf
1557 827.07635 m
(,-./01&*2&*)[ 6.165000 5.499000 6.003000 5.166000 2.502000 6.840000 5.004000 2.835000 5.337000 5.004000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
