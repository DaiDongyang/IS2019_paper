%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 176.000000 321.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 176 321
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 176 321
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /m put
dup 36 /a put
dup 37 /n put
dup 38 /t put
dup 39 /i put
dup 40 /c put
dup 41 /space put
dup 42 /F put
dup 43 /u put
dup 44 /r put
dup 45 /q put
dup 46 /P put
dup 47 /d put
dup 48 /B put
dup 49 /E put
dup 50 /R put
dup 51 /T put
dup 52 /N put
dup 53 /b put
dup 54 /s put
dup 55 /l put
dup 56 /fi put
dup 57 /C put
dup 58 /h put
dup 59 /L put
dup 60 /parenleft put
dup 61 /o put
dup 62 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC000018D8686561640000000000001DB400000036686865610000000000001DEC00000024686D74780000000000001E10000000806C6F63610000000000001E90000000426D6178700000000000001ED400000020707265700000000000001EF40000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546







00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/B 4 def
/C 5 def
/E 6 def
/F 7 def
/L 8 def
/N 9 def
/P 10 def
/R 11 def
/S 12 def
/T 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/h 19 def
/i 20 def
/l 21 def
/m 22 def
/n 23 def
/o 24 def
/q 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/fi 30 def
/uni2B91 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4151493 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C1729802DA479E44F824526137EEB725F9A8277E11FB440D7432A2FB2F8DA2BCCD532B90735191BAC4AF35F550E035C4C8C1BAC2797ED4C005EE32CFA64F85F936DA558E85ADDE29C5BBD37B21E66C5321EEA5733BA6EB183E6C448990B65C678A9EF1A5D645249005D94BC4E79A28BE7F04B5AA42716AEBDEC982B6175CE8E78B14232CC4E5444426292A31F71488C1BD6918D9F7F541CB634EB60CF07162057632A41C4FAEFA56AECE0224A1B03B48D30E4B08DD409513DBC246E1A08ABF29C92E2C15140E00AD12E90D1D3B0A0CCF60DA8F634294E2C690AAD775B89B8F9C61D428FD1E65CD21E06ED64D02E77230AABD0E1E37663A3C1B9410B38CFBB57BC60C5835784B660466F06EEBDDE6A7508C921EBAAA99638169F08A3C3A68DA9FCB36427FC675DB5B95FD810424B35884F91D4F31EE6F38FD11A19DCE473214AED00E7B7565D4D4D3D13A2C53DCC873C6A8B0A4F184E08080D17BC70386462658CC56D8EA78961F8245F7A6ADAC8995AED3C2E385AF95E7584F035F5787FADE5F5E8152505988148EEDD1AFDE9C7F242C12F2A4C23E1FD798A7C467FE887DBD5D36D9C7076CAE12A453861ED7278010785025AF0D6CB33DA2D5C45A4BAD707EE45431268E1B8026DD638ECC113FE8165A735B9E75FAF45AAADE4B9A2957D5864A9CFEDAB100F8ED243985CDEC55FEDBEB1C80A04BF4788FF903AA4B486986E9CADEC2BF99C660D


D5C39C8432822AA040B22E856EDB428DA760D82D57D0AC7B357A0481A6610D938396AC6BAE3A5DE6D5A30CA49D9DF2803AC21C93EA509ADF2CD7C4377F519CD4D7E1D220BB425BB425F02A879CE41A6A4FD6E53590F02B5343849F2FAA421B45AD44E70FA9C000CF39CDA357759B39AD5B35F5D5EF619D422B91DB3B57DC9F3843B5597252B7ABD7A206D0731DEC8E69EA416EE00BAE6DE5A5AB5A85091FA89B589511F1EB139FAE8C7CFFE7468120E9DA007A807B5CCB6AA4D4B3F4FDD9B441FF798A2CE5D2B5E4ABB1F864F27684A8DBCF4B02C99A9F30A9C4D39B02314B11C970699A75392350F77D10CC797DAA272BA694C50D046F67A2B6D9E8B179B8636932077301A536DCCCBA1DB2F1D3891FF1ABA80FEAB801F01431448D3DE41EACF727E3055D41C057A8B591D870BDC2AB517D7CB54F87D7F52D747B927251E762A306FD16AF22617BE49352B80C1652F7ADF17FDEA0640E9BB79CD0DFD1DCA0F40C625CD0C33C9C13E167A7995BA6D9321EA8493653BC91E6482382632DF239492D3B1A4DF2011F76AD3DCDD7BC106A9622CF575F2372E4E68EDBBE069F3E963C92CA1E159E58848E0917652BA670485D59A23EC84CF6E495F095E66E8752B97DFB466C5C53E221CD939EE96AC71BC1238A8DCAB50EA2071297C008B562B20DA5D0BF5C68B356BA93FECCBAF186B8E72B1562BBBA472266751214693CF3D9D95FD7BCC7C166301D8AC79D7C58C7FBBB384C64053D0DB229D9E9CF0AFA1A35EAB83D6157A9C7F5C3A62AAC29F3673058729658DB9F99FED260546189B84F82BDC4C8BDC16BE8BB5FEBBFFB61EAD912ED9ECAE9D51F90368D08EBC4FDDC4C736E9313339C754ACF233A496CB532C98A6BDDA29CA888C2A8C4D36298B5A7D8D5FBF8629E225B07EC157D1C4D5EA12FA73BEB064A6773AC661DBBA6E948BCE516C9AE1B68879A83C7CC57CEB8977975041FCF3B021C21247054BB0F491A90C1BC46665099658F9533E911CE61AD20F9FC9B94B9676FC4540B50157678489CCDF6392D73ABFFF679DE00F8BD0C438E72B8C2B0993915A35F72550AD955028DE0F2E7C9918C6800EFCEC69AE561B5411C36CF87776D80760F603A727C9B0F765C770187304392A4CE22EBD09151BA3415273BBB161684E77820538767BCD5CCF16BCFC2C181D1EFF410F0B7249921C64EE8D1C9BB6B13C7CF1CED1CA020F7F8E5FF729A950D3A18A107EA622430BFFEB6747B4930C87823BC766360F0083FEAF653A088610080D83071BE48209F59F853A99A6A0B8FF49A44AAB2BF5BEB28F51CF4A6D13D0367D5EDAC79AD6112252CDF547106C721D8ABBE48428B916503ABA1CDD4C5AE0F7A91222C42E13C542308DE577712C08FBCE787A7210CFCF3729517E995F4B5B11AA37B4D220F26509D6608EB0E183030902526B1EFA3A6CA6BE569D13CA8

0EB0D6449D8044EC32BEFE2A760A7997FE35FA3F035C1C4F15CFC6012BEE187B40473FA5B18C30A084FD779175FBE6E5E63D05E2BA55B62DB72FBF0714A6FA9CCEB7C6D0B53F110B09FF59C397A8C82695D96DDB69F6A835C8D2BDDBAAB31B4898E4C974A04FA7054EF803672E98F059BEA17B0F655E847D68F9E723A3C49519A58CAE7BB2F2DAB424FC20B0343B07BD9B59B549F3E3D9B6DC5FD69AB7B447FB9710653F14DF9A05F29BAFD23CBD151F8C5124F95B88BFA863BF40C9CD3289A35F6210272C22C7DAE54E5C00131F00D4F40FB70C726DA99AD1517D9B0FAA283A1FF2E346BEB3535B8172ECCB49FC6E783FDAB2796884CD7BEA3E2CBD373334BD1BCAC065EEDE456EF9276FBDD2260F0D6B8107D8623B48071B8C1FF0B96F548CE8BE8F99E9B1ADD2957C7D0B7146A61249FC9DD5976BA682EE9855441E64F407171B4029C96ED8698190C5DE66AD2A0C23CF9E70DC049D86A1B1AA0B27728B9A08D3E09B15E8ABB73B95CAE3026E0568D1AD37A196CA044C39EDB251FB5CB311F12DE70E1389C7A29DBC1EFDEF405272ED8075806BAB4475EFBA3A2D0631098D51163B63E38003EBE17D38D05E517F62CEFD23AE5E7E46B4B21BA5F8B78D03A1A0798A683117BF42E831B3771A54C03F3BE7811749F6D2F3A6A782AB455C311A3BD061E94BD08582633403FEA665AE312217328B74BA67EB5F3FE5BA990A4FAE7A0F9A21065790C6870ED10C1BFB2086E1999C3E64C30009C533F5FDCD160D808D69B5105076C777D64CFFB88883387AC5A83137B238764AA65A72FDCEEC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 176 321 rc
0 321 m
176 321 l
176 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-888.42108 1089.421 m
1760 1089.421 l
1760 -1163.2106 l
-888.42108 -1163.2106 l
h
-888.42108 1089.421 m
f
5 179.40805 m
171.5 179.40805 l
173.15686 179.40805 174.5 178.0649 174.5 176.40805 c
174.5 144.40805 l
174.5 142.75119 173.15686 141.40805 171.5 141.40805 c
5 141.40805 l
3.3431458 141.40805 2 142.75119 2 144.40805 c
2 176.40805 l
2 178.0649 3.3431458 179.40805 5 179.40805 c
h
5 179.40805 m
f
2 w
1 J
1 j
[
8
8
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -54 519 cm
59 339.59195 m
225.5 339.59195 l
227.15686 339.59195 228.5 340.93509 228.5 342.59195 c
228.5 374.59195 l
228.5 376.24881 227.15686 377.59195 225.5 377.59195 c
59 377.59195 l
57.343147 377.59195 56 376.24881 56 374.59195 c
56 342.59195 l
56 340.93509 57.343147 339.59195 59 339.59195 c
h
59 339.59195 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
79.417999 355.14395 m
(!"#$%&'\(\)*"$&+,")[ 10.368000 8.592000 13.648000 8.592000 8.896000 5.040000 3.552000 8.592000 4.448000 9.184000 8.592000 8.592000 5.040000 8.896000 5.040000 0.000000 ] xS
104.018 373.59195 m
(\)!"-+"%\(")[ 4.448000 10.368000 8.592000 9.488000 8.896000 8.592000 8.896000 8.592000 0.000000 ] xS
/Cs2 SC
0.75 1 0.75 sc
CM
4 109.31609 m
170.5 109.31609 l
172.15686 109.31609 173.5 107.97295 173.5 106.31609 c
173.5 74.316086 l
173.5 72.659233 172.15686 71.316086 170.5 71.316086 c
4 71.316086 l
2.3431458 71.316086 1 72.659233 1 74.316086 c
1 106.31609 l
1 107.97295 2.3431458 109.31609 4 109.31609 c
h
4 109.31609 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
58 409.6839 m
224.5 409.6839 l
226.15686 409.6839 227.5 411.02707 227.5 412.6839 c
227.5 444.6839 l
227.5 446.34076 226.15686 447.6839 224.5 447.6839 c
58 447.6839 l
56.343147 447.6839 55 446.34076 55 444.6839 c
55 412.6839 l
55 411.02707 56.343147 409.6839 58 409.6839 c
h
58 409.6839 m
S
/Cs1 SC
0 sc
0 i
84.505997 433.6839 m
(.",&$'%"/\)0123)[ 10.368000 8.592000 5.328000 5.040000 8.592000 3.552000 8.896000 8.592000 9.488000 4.448000 10.960000 9.776000 10.672000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
92.104271 44.397503 m
82.395729 44.397503 l
82.395729 55.142723 l
77.541458 55.142723 l
87.25 66.142723 l
96.958542 55.142723 l
92.104271 55.142723 l
h
92.104271 44.397503 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 474.60251 m
136.39572 474.60251 l
136.39572 463.85727 l
131.54146 463.85727 l
141.25 452.85727 l
150.95854 463.85727 l
146.10428 463.85727 l
h
146.10428 474.60251 m
S
0 i
1 1 1 sc
CM
92.104271 114.48946 m
82.395729 114.48946 l
82.395729 125.23468 l
77.541458 125.23468 l
87.25 136.23468 l
96.958542 125.23468 l
92.104271 125.23468 l
h
92.104271 114.48946 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 404.51053 m
136.39572 404.51053 l
136.39572 393.76532 l
131.54146 393.76532 l
141.25 382.76532 l
150.95854 393.76532 l
146.10428 393.76532 l
h
146.10428 404.51053 m
S
0 i
1 1 1 sc
CM
92.104271 184.58141 m
82.395729 184.58141 l
82.395729 195.32663 l
77.541458 195.32663 l
87.25 206.32663 l
96.958542 195.32663 l
92.104271 195.32663 l
h
92.104271 184.58141 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 334.41858 m
136.39572 334.41858 l
136.39572 323.67337 l
131.54146 323.67337 l
141.25 312.67337 l
150.95854 323.67337 l
146.10428 323.67337 l
h
146.10428 334.41858 m
S
0 i
0.75 1 0.75 sc
CM
5 249.5 m
171.5 249.5 l
173.15686 249.5 174.5 248.15686 174.5 246.5 c
174.5 214.5 l
174.5 212.84314 173.15686 211.5 171.5 211.5 c
5 211.5 l
3.3431458 211.5 2 212.84314 2 214.5 c
2 246.5 l
2 248.15686 3.3431458 249.5 5 249.5 c
h
5 249.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
59 269.5 m
225.5 269.5 l
227.15686 269.5 228.5 270.84314 228.5 272.5 c
228.5 304.5 l
228.5 306.15686 227.15686 307.5 225.5 307.5 c
59 307.5 l
57.343147 307.5 56 306.15686 56 304.5 c
56 272.5 l
56 270.84314 57.343147 269.5 59 269.5 c
h
59 269.5 m
S
/Cs1 SC
0 sc
0 i
72.921997 293.5 m
(44\)5$6"/\)\(7$66'8",)[ 11.552000 11.552000 4.448000 9.488000 8.592000 8.000000 8.592000 9.488000 4.448000 8.592000 3.552000 8.592000 8.000000 8.000000 3.552000 8.288000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
5 39.224133 m
171.5 39.224133 l
173.15686 39.224133 174.5 37.880989 174.5 36.224133 c
174.5 4.2241344 l
174.5 2.5672801 173.15686 1.2241342 171.5 1.2241342 c
5 1.2241342 l
3.3431458 1.2241342 2 2.5672801 2 4.2241344 c
2 36.224133 l
2 37.880989 3.3431458 39.224133 5 39.224133 c
h
5 39.224133 m
f
[
8
8
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -54 519 cm
59 479.77588 m
225.5 479.77588 l
227.15686 479.77588 228.5 481.11902 228.5 482.77588 c
228.5 514.77588 l
228.5 516.43274 227.15686 517.77588 225.5 517.77588 c
59 517.77588 l
57.343147 517.77588 56 516.43274 56 514.77588 c
56 482.77588 l
56 481.11902 57.343147 479.77588 59 479.77588 c
h
59 479.77588 m
S
/Cs1 SC
0 sc
0 i
68.762001 503.77588 m
(9:$,$\(&",\)!"-+"%\(")[ 11.552000 8.896000 8.592000 5.328000 8.592000 8.592000 5.040000 8.592000 5.328000 4.448000 10.368000 8.592000 9.488000 8.896000 8.592000 8.896000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
5 319.59195 m
171.5 319.59195 l
173.15686 319.59195 174.5 318.24881 174.5 316.59195 c
174.5 284.59195 l
174.5 282.93509 173.15686 281.59195 171.5 281.59195 c
5 281.59195 l
3.3431458 281.59195 2 282.93509 2 284.59195 c
2 316.59195 l
2 318.24881 3.3431458 319.59195 5 319.59195 c
h
5 319.59195 m
f
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -54 519 cm
59 199.40805 m
225.5 199.40805 l
227.15686 199.40805 228.5 200.75119 228.5 202.40805 c
228.5 234.40805 l
228.5 236.0649 227.15686 237.40805 225.5 237.40805 c
59 237.40805 l
57.343147 237.40805 56 236.0649 56 234.40805 c
56 202.40805 l
56 200.75119 57.343147 199.40805 59 199.40805 c
h
59 199.40805 m
S
/Cs1 SC
0 sc
0 i
61.498001 223.40805 m
(;$5"76<.,=%+%\('$&'$%6>)[ 8.896000 8.592000 9.488000 8.592000 3.552000 8.000000 4.144000 10.368000 5.040000 9.184000 8.896000 8.896000 8.896000 8.592000 3.552000 8.592000 5.040000 3.552000 8.592000 8.896000 8.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
92.104271 254.67337 m
82.395729 254.67337 l
82.395729 265.41858 l
77.541458 265.41858 l
87.25 276.41858 l
96.958542 265.41858 l
92.104271 265.41858 l
h
92.104271 254.67337 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -54 519 cm
146.10428 264.32663 m
136.39572 264.32663 l
136.39572 253.58141 l
131.54146 253.58141 l
141.25 242.58141 l
150.95854 253.58141 l
146.10428 253.58141 l
h
146.10428 264.32663 m
S
ep
end
%%Trailer
%%EOF
